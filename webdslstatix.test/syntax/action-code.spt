module action-code

language webdsl-statix

fixture [[
  application test_action_code

  [[...]]
]]

test global function def [[
  cached function x(){}
]] parse succeeds

test global var def inferred init [[
  var x := 12
]] parse succeeds

test global var def init [[
  var x : Int := 12
]] parse succeeds

test global var def [[
  var x :Int
]] parse succeeds

test ref global var [[
  var x := global.bla
]] parse succeeds

test hql syntax [[
  var x := selectnewTag(t._name,t._project)fromIssueasileftjoini.tagsast
]] parse succeeds

test hql query 1 [[
  var x :=  select new Tag('t._name', 't._project')
            from Issue as i left join i.tags as t
            where (t in i.tags) and (t._project = ~this) and (t._name not like ~"@%")
            group by t
            order by count(i) desc
            limit ~nr
]] parse succeeds

test hql query 2 [[
  var x :=  from Ent where current_date()>current_time() and current_time()=current_timestamp() and
            second(start) > 1 and minute(start)>2 and hour(start)>2 and day(start)>2 and month(start)>2 and year(start)>2
]] parse succeeds

test if expression 1 [[
  var x := if(true) "1" else "2"
]] parse succeeds

test if expression 2 [[
  var x := if(true)"1"else"2"=="1"
]] parse succeeds

test list comprehension 1 [[
  var x := [ x | x in test ]
]] parse succeeds

test list comprehension 2 [[
  var x := [x.field | x: Ent in collection where x.y > 10 order by x.value group by x.field]
]] parse succeeds

test list comprehension 3 [[
  var x := [ x in xs where x > 4 ]
]] parse succeeds

test nested object creation [[
  var x :=  Person{
              key        := key
              initials   := initials
              lastname   := last
              firstnames := first
              portrait   := Photo{ title := normalizeName(first + " " + last) }
              reviewer   := false
            }
]] parse succeeds

test rendertemplate [[
 var x := rendertemplate(output(elements()))
]] parse succeeds

test request var inferred init [[
  request var fddf:=User{}
]] parse succeeds

test request var [[
  request var fddf: String
]] parse succeeds
