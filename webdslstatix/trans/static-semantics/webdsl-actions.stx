module static-semantics/webdsl-actions

imports
  static-semantics/actions/binops
  static-semantics/webdsl-types
  static-semantics/webdsl

rules // functions

  defOk(s, GlobalFunction(f)) :- {s_function}
    new s_function, s_function -IMPORT-> s,
    functionOk(s_function, f).

  defOk(s, ExtendGlobalFunction(f)) :- {s_function}
    new s_function, s_function -IMPORT-> s,
    functionOk(s_function, f).

  functionOk : scope * Function
  functionOk(s_function, Function(_, FormalArgs(args), returntype, Block(stmts))) :- {s_body}
    declArgs(s_function, args),
    new s_body, s_body -P-> s_function,
    stmtsOk(s_body, stmts).

  declArgs maps declArg(*, list(*))
  declArg : scope * FormalArg
  declArg(s, Arg(x, sort)) :- {t}
    t == typeOfSort(s, sort),
    inequalType(t, UNTYPED()) | error $[Unknown type [sort]],
    declVar(s, x, t).

rules // statements

  stmtOk(s, Stat(exp)) :-
    expOk(s, exp).

  stmtOk(s, VarDeclInit(x, sort, exp)) :- {t}
    t == typeOfSort(s, sort),
    equalType(t, typeOfExp(s, exp)) | error $[Expression [exp] is not of type [sort]] @exp,
    declVar(s, x, t).

rules // variables

  typeOfExp(s, Var(x)) = getVariableType(s, x).

  defOk(s, GlobalVarDecl2Definition(GlobalVarDeclInit(x, sort, exp))) :- {t}
    t == typeOfSort(s, sort),
    equalType(t, typeOfExp(s, exp)) | error $[Expression [exp] is not of type [sort]],
    declVar(s, x, t).

  declVar : scope * string * TYPE
  declVar(s, x, t) :-
    s -> Variable{x} with typeOfDecl t,
    noDuplicateVarDefs(s, x) | error $[Duplicate defition of [x] in this context].

  noDuplicateVarDefs : scope * string
  noDuplicateVarDefs(s, x) :-
    query typeOfDecl filter P* and { Variable{x'} :- x' == x }
                     min $ < P
                     in s |-> [_].

  noDuplicateVarDefsInSuper : scope * string
  noDuplicateVarDefsInSuper(s_sub, x) :-
    query typeOfDecl filter P* INHERIT* and { Variable{x'} :- x' == x }
                     min $ < P, $ < INHERIT, P < INHERIT
                     in s_sub |-> [_].
