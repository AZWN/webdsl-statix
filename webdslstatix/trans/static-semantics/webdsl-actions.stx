module static-semantics/webdsl-actions

imports
  static-semantics/actions/binops
  static-semantics/actions/functions

  static-semantics/entities/annotations

  static-semantics/types/built-ins

  static-semantics/webdsl-entities
  static-semantics/webdsl-types
  static-semantics/webdsl

rules // statements

  stmtOk(s, _, Stat(exp), _) :-
    expOk(s, exp).

  stmtOk(s, s_decl, VarDecl(x, sort), _) :- {t}
    t == typeOfSort(s, sort),
    inequalType(t, UNTYPED()) | error $[Unknown type [sort]] @sort,
    declareVar(s_decl, x, t),
    @x.type := t.

  stmtOk(s, s_decl, VarDeclInit(x, sort, exp), _) :- {t}
    t == typeOfSort(s, sort),
    typeCompatible(typeOfExp(s, exp), t) | error $[Expression [exp] is not of type [sort]] @exp,
    declareVar(s_decl, x, t),
    @x.type := t.

  stmtOk(s, s_decl, VarDeclInitInferred(x, exp), _) :- {t}
    t == typeOfExp(s, exp),
    inequalType(t, UNTYPED()) | error $[Unable to infer type of [exp]] @exp,
    declareVar(s_decl, x, t),
    @x.type := t.

  stmtOk(s, _, Assignment(_, exp), _) :- false | error $[Left-hand side of assignment should be a mutable variable].
  stmtOk(s, _, Assignment(v@Var(x), exp), _) :- {t}
    variableType(s, x) == t,
    isMutable(s, x),
    typeCompatible(typeOfExp(s, exp), t) | error $[Expression [exp] is not of type [t]],
    @v.type := t.

  stmtOk(s, _, Assignment(FieldAccess(v@FAVar(var), x), exp), _) :- {varType t}
    varType == variableType(s, var),
    @v.type := varType,
    t == typeOfProperty(s, varType, x),
    @x.type := t,
    isMutableProperty(varType, x),
    typeCompatible(typeOfExp(s, exp), t) | error $[Expression [exp] is not of type [t]].

  stmtOk(s, _, Assignment(FieldAccess(FAExp(lhexp), x), rhexp), _) :- {expType t}
    expType == typeOfExp(s, lhexp),
    t == typeOfProperty(s, expType, x),
    @x.type := t,
    isMutableProperty(expType, x),
    typeCompatible(typeOfExp(s, rhexp), t) | error $[Expression [rhexp] is not of type [t]].

  stmtOk(s, _, Assignment(ci@CollectionIndex(_, _), exp), _) :-
    typeCompatible(typeOfExp(s, exp), typeOfExp(s, ci)).

  stmtOk(s, _, Assignment(c@Cast(_, _), exp), _) :-
    typeCompatible(typeOfExp(s, exp), typeOfExp(s, c)).

  stmtOk(s, _, If(c, Block(then), Block(else)), rt) :- {s_then s_else}
    equalType(typeOfExp(s, c), bool(s)) | error $[Condition should be of type bool] @c,
    new s_then, s_then -P-> s,
    stmtsOk(s_then, then, rt),
    new s_else, s_else -P-> s,
    stmtsOk(s_else, else, rt).

  stmtOk(s, _, r@Return(exp), returnType) :- {returnExpType}
    inequalType(returnType, UNTYPED()) | error $[Return statement not allowed here] @r,
    inequalType(returnType, VOID()) | error $[No return type specified in this context] @exp,
    returnExpType == typeOfExp(s, exp),
    typeCompatible(returnExpType, returnType) | error $[Must return an expression of type [returnType], [returnExpType] given] @exp.

  stmtOk(s, _, r@ReturnEmpty(), returnType) :-
    inequalType(returnType, UNTYPED()) | error $[Return statement not allowed here] @r,
    equalType(returnType, VOID()) | error $[Must return an expression of type [returnType]] @r.

rules // variables

  typeOfExp(s, exp@Var(x)) = t :-
    variableType(s, x) == t,
    @exp.type := t.

  typeOfSimpleExp(s, exp@SimpleVar(x)) = t :-
    variableType(s, x) == t,
    @exp.type := t.

  typeOfExp(s, FieldAccess(exp@FAVar(var), x)) = propertyType :- {varType}
    variableType(s, var) == varType,
    @exp.type := varType,
    typeOfProperty(s, varType, x) == propertyType,
    @x.type := propertyType.

  typeOfExp(s, FieldAccess(FAExp(exp), x)) = propertyType :- {t}
    typeOfExp(s, exp) == t,
    typeOfProperty(s, t, x) == propertyType,
    @x.type := propertyType.

  typeOfSimpleExp(s, SimpleFieldAccess(exp, x)) = propertyType :- {t}
    typeOfSimpleExp(s, exp) == t,
    typeOfProperty(s, t, x) == propertyType,
    @x.type := propertyType.

  typeOfProperty : scope * TYPE * string -> TYPE
  typeOfProperty(_, t, _) = UNTYPED() :- false | error $[Field access is only allowed on native classes and entities, [t] given].
  typeOfProperty(_, ENTITY(s), x) = t :-
    propertyType(s, x) == t.
  typeOfProperty(_, NATIVECLASS(s), x) = t :-
    propertyType(s, x) == t.

  defOk(s, GlobalVarDecl(x, sort)) :- {t}
    t == typeOfSort(s, sort),
    declareVar(s, x, t).

  defOk(s, GlobalVarDeclInit(x, sort, exp)) :- {t}
    t == typeOfSort(s, sort),
    typeCompatible(typeOfExp(s, exp), t) | error $[Expression [exp] is not of type [sort]] @exp,
    declareVar(s, x, t).

  defOk(s, GlobalVarDeclInitInferred(x, exp)) :- {t}
    t == typeOfExp(s, exp),
    inequalType(t, UNTYPED()) | error $[Cannot resolve type of expression [exp]],
    declareVar(s, x, t).

  noDuplicateVarDefs : scope * string
  noDuplicateVarDefs(s, x) :-
    query var filter P*
              and { x' :- x' == ((x, _), _) }
              min $ < P
              in s |-> [_].

  noDuplicateVarDefsInSuper : scope * string
  noDuplicateVarDefsInSuper(_, "this"). // allow "this" var to be redefined in sub
  noDuplicateVarDefsInSuper(s_sub, x) :- {xs}
    resolveProperty(s_sub, x) == xs,
    withoutAnnotation(xs, OVERRIDABLE()) == [_].

rules // lists and sets

  typeOfExp(s, ListCreation([])) = UNTYPED() :- false | error $[Type cannot be determined for empty untyped list creation].
  typeOfExp(s, lc@ListCreation([hd | tl])) = LIST(t) :-
    t == typeOfExp(s, hd), // first element of the untyped list creation determines the type
    typesCompatibleWith(t, typesOfExps(s, tl)) | error $[Not all elements are compatible with type [t]] @tl,
    @lc.type := LIST(t).

  typeOfExp(s, tlc@TypedListCreation(sort, exps)) = LIST(t) :-
    typeOfSort(s, sort) == t,
    typesCompatibleWith(t, typesOfExps(s, exps)) | error $[Not all elements are compatible with type [t]] @exps,
    @tlc.type := LIST(t).

  typeOfExp(s, SetCreation([])) = UNTYPED() :- false | error $[Type cannot be determined for empty untyped set creation].
  typeOfExp(s, sc@SetCreation([hd | tl])) = SET(t) :-
    t == typeOfExp(s, hd), // first element of the untyped set creation determines the type
    typesCompatibleWith(t, typesOfExps(s, tl)) | error $[Not all elements are compatible with type [t]] @tl,
    @sc.type := SET(t).

  typeOfExp(s, tsc@TypedSetCreation(sort, exps)) = SET(t) :-
    typeOfSort(s, sort) == t,
    typesCompatibleWith(t, typesOfExps(s, exps)) | error $[Not all elements are compatible with type [t]] @exps,
    @tsc.type := SET(t).

  typeOfExp(s, ci@CollectionIndex(col, idx)) = t :- {colType idxType}
    colType == typeOfExp(s, col),
    idxType == typeOfExp(s, idx),
    typeCompatible(idxType, int(s)) | error $[Index expression must be of type Int, [idxType] given],
    t == collectionItemType(colType),
    @ci.type := t.

  collectionItemType : TYPE -> TYPE
  collectionItemType(c) = UNTYPED() :- false | error $[First argument must be a list or set, [c] given].
  collectionItemType(LIST(t)) = t.
  collectionItemType(SET(t)) = t.
