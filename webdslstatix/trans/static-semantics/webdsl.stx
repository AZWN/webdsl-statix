module static-semantics/webdsl

imports
  signatures/webdsl-statix-sig

  static-semantics/actions/built-ins
  static-semantics/entities/built-ins
  static-semantics/types/built-ins
  static-semantics/ui/built-ins

  static-semantics/entities/annotations

  static-semantics/webdsl-ac
  static-semantics/webdsl-actions
  static-semantics/webdsl-entities
  static-semantics/webdsl-hql
  static-semantics/webdsl-modules
  static-semantics/webdsl-native
  static-semantics/webdsl-regex
  static-semantics/webdsl-search
  static-semantics/webdsl-types
  static-semantics/webdsl-ui

signature

  sorts
    TYPE // semantic type
    BOOL // used as return values of functional constraints

  constructors
    TRUE : BOOL
    FALSE : BOOL

  name-resolution
    labels
      P       // parent edge label for consecutive statements
      F       // function edge label for embedding functions, templates and pages in a scope
      EXTEND  // extend edge label for extending entities
      INHERIT // inherit edge label for subclasses
      DEF     // definition edge label for embedding top-level definitions in the global scope
      IMPORT  // import edge label for importing another module

  relations
    mod : list(string) * scope

    type : string * TYPE

    extendentity : string * scope

    page     : string * TYPE
    template : string * TYPE

    function : string * TYPE

    var      : string * TYPE

rules // module declaration and resolving

  declareMod : scope * list(string) * scope
  declareMod(s, m, s_mod) :-
    !mod[m, s_mod] in s,
    resolveMod(s, m) == [_] | error $[Module [m] is already declared].

  resolveMod : scope * list(string) -> list((path * (list(string) * scope)))
  resolveMod(s, m) = mods :-
    query mod filter e
              and { m' :- m' == (m, _) }
              in s |-> mods.

  resolveModWildcard : scope * list(string) -> list((path * (list(string) * scope)))
  resolveModWildcard(s, names) = mods :-
    query mod filter e
              and { m' :- isPrefix(names, m') }
              in s |-> mods.

  isPrefix : list(string) * (list(string) * scope)
  isPrefix(names, (names', _)) :- isPrefix_internal(names, names').

  isPrefix_internal : list(string) * list(string)
  isPrefix_internal([], _).
  isPrefix_internal([x | xs], [x | ys]) :- isPrefix_internal(xs, ys).
  isPrefix_internal(_, _) :- false.

rules // type declaration and resolving

  declareType : scope * string * TYPE
  declareType(s, name, t) :-
    !type[name, t] in s,
    resolveType(s, name) == [(_, (_, t))] | error $[Type [name] is defined multiple times] @name.

  resolveType : scope * string -> list((path * (string * TYPE)))
  resolveType(s, name) = ps :-
    query type filter P* F* ((EXTEND? INHERIT*) | (DEF? IMPORT?))
               and { e' :- e' == (name, _) }
               in s |-> ps.

rules // extend entity declaration

  declareExtendEntity : scope * string * scope
  declareExtendEntity(s, e, s_extend) :-
    !extendentity[e, s_extend] in s.

  resolveExtendEntity : scope * string -> list((path * (string * scope)))
  resolveExtendEntity(s, e) = ps :-
    query extendentity filter P* F* ((EXTEND? INHERIT*) | (DEF? IMPORT?))
                       and { e' :- e' == (e, _) }
                       in s |-> ps.

rules // ui declaration and resolving

  declareTemplate : scope * string * list(TYPE)
  declareTemplate(s, t, ts) :- declareTemplate_internal(s, t, ts, FALSE()).

  declareAjaxTemplate : scope * string * list(TYPE)
  declareAjaxTemplate(s, t, ts) :- declareTemplate_internal(s, t, ts, TRUE()).

  declareTemplate_internal : scope * string * list(TYPE) * BOOL
  declareTemplate_internal(s, t, ts, ajax) :-
    !template[t, TEMPLATE(ts, ajax)] in s,
    resolvePage(s, t) == [] | error $[Page/template [t] is defined multiple times] @t.

  declarePage : scope * string * list(TYPE)
  declarePage(s, p, ts) :-
    !page[p, PAGE(ts)] in s,
    resolveUi(s, p) == [(_, (_, PAGE(ts)))] | error $[Page/template [p] is defined multiple times] @p.

  resolveUi : scope * string -> list((path * (string * TYPE)))
  resolveUi(s, x) = addQueryResults(resolveTemplate(s, x), resolvePage(s, x)).

  resolveTemplate : scope * string -> list((path * (string * TYPE)))
  resolveTemplate(s, t) = resolveTemplate_internal(s, t, FALSE()).

  resolveAjaxTemplate : scope * string -> list((path * (string * TYPE)))
  resolveAjaxTemplate(s, t) = resolveTemplate_internal(s, t, TRUE()).

  resolveTemplate_internal : scope * string * BOOL -> list((path * (string * TYPE)))
  resolveTemplate_internal(s, t, FALSE()) = ps :-
    query template filter P* F* ((EXTEND? (INHERIT EXTEND?)*) | (DEF? IMPORT?))
                   and { t' :- t' == (t, _) }
                   in s |-> ps.

  resolveTemplate_internal(s, t, TRUE()) = ps :-
    query template filter P* F* ((EXTEND? (INHERIT EXTEND?)*) | (DEF? IMPORT?))
                   and { t' :- t' == (t, TEMPLATE(_, TRUE())) }
                   in s |-> ps.

  resolvePage : scope * string -> list((path * (string * TYPE)))
  resolvePage(s, p) = ps :-
    query page filter P* F* ((EXTEND? (INHERIT EXTEND?)*) | (DEF? IMPORT?))
               and { p' :- p' == (p, _) }
               in s |-> ps.

rules // function declaration and resolving

  declareFunction : scope * string * list(TYPE) * TYPE
  declareFunction(s, f, args, return) :- declareFunction_internal(s, f, args, return, FALSE()).

  declareStaticFunction : scope * string * list(TYPE) * TYPE
  declareStaticFunction(s, f, args, return) :- declareFunction_internal(s, f, args, return, TRUE()).

  declareFunction_internal : scope * string * list(TYPE) * TYPE * BOOL
  declareFunction_internal(s, f, args, return, static) :-
    !function[f, FUNCTION(args, return, static)] in s.

  resolveFunction : scope * string -> list((path * (string * TYPE)))
  resolveFunction(s, f) = ps :-
    query function filter P* F* ((EXTEND? (INHERIT EXTEND?)*) | (DEF? IMPORT?))
                   and { f' :- f' == (f, FUNCTION(_, _, _)) }
                   in s |-> ps.

  resolveEntityFunction : scope * string -> list((path * (string * TYPE)))
  resolveEntityFunction(s, x) = ps :-
    query function filter EXTEND? (INHERIT EXTEND?)*
                   and { x' :- x' == (x, _) }
                   min $ < EXTEND, $ < INHERIT, EXTEND < INHERIT
                   and { (f, FUNCTION(args, _, _)), (f, FUNCTION(args, _, _)) }
                   in s |-> ps.

  resolveStaticEntityFunction : scope * string -> list((path * (string * TYPE)))
  resolveStaticEntityFunction(s, x) = ps :-
    query function filter EXTEND? (INHERIT EXTEND?)*
                   and { x' :- x' == (x, FUNCTION(_, _, TRUE())) }
                   min $ < EXTEND, $ < INHERIT, EXTEND < INHERIT
                   and { (f, FUNCTION(args, _, _)), (f, FUNCTION(args, _, _)) }
                   in s |-> ps.

rules // action and placeholder declaration and resolving

  declareAction : scope * string * list(TYPE)
  declareAction(s, a, ts) :-
    !function[a, ACTION(ts)] in s,
    resolveAction(s, a) == [(_, (_, ACTION(ts)))] | error $[Action [a] is defined multiple times] @a.

  resolveAction : scope * string -> list((path * (string * TYPE)))
  resolveAction(s, a) = as :-
    query function filter P*
                   and { a' :- a' == (a, ACTION(_)) }
                   in s |-> as.

  declarePlaceholder : scope * string
  declarePlaceholder(s, ph) :-
    !var[ph, PLACEHOLDER()] in s,
    noDuplicateVarDefs(s, ph) | error $[Variable [ph] is defined multiple times] @ph.

  resolvePlaceholder : scope * string -> list((path * (string * TYPE)))
  resolvePlaceholder(s, ph) = phs :-
    query var filter P*
              and { ph' :- ph' == (ph, PLACEHOLDER()) }
              in s |-> phs.

rules // variable declaration and resolving

  declareVar : scope * string * TYPE
  declareVar(s, x, t) :-
    !var[x, t] in s,
    noDuplicateVarDefs(s, x).

  resolveVar : scope * string -> list((path * (string * TYPE)))
  resolveVar(s, x) = ps :-
    query var filter P* F* ((EXTEND? (INHERIT EXTEND?)*) | (DEF? IMPORT?))
              and { x' :- x' == (x, _) }
              min $ < P, P < F, F < EXTEND, EXTEND < INHERIT, INHERIT < DEF, DEF < IMPORT
              and true
              in s |-> ps.

  resolveProperty : scope * string -> list((path * (string * TYPE)))
  resolveProperty(s_entity, x) = ps :-
    query var filter EXTEND? (INHERIT EXTEND?)*
              and { x' :- x' == (x, _) }
              in s_entity |-> ps.

  resolveMutableProperty : scope * string -> list((path * (string * TYPE)))
  resolveMutableProperty(s_entity, x) = ps :-
    query var filter EXTEND? (INHERIT EXTEND?)*
              and { x' :- x' == (x, _) }
              in s_entity |-> ps.

  declareParameters : scope * list((string * TYPE))
  declareParameters(s, []).
  declareParameters(s, [(x, t)|tail]) :-
    declareVar(s, x, t),
    declareAnnotation(s, x, DERIVED()), // abuse derived annotation to declare immutability of parameters
    declareParameters(s, tail).

rules // declare common rules and mappings

  unitOk : scope * Unit
  unitOk(_, _) :- try { false } | warning $[This unit is not yet implemented].

  sectionOk : scope * Section
  sectionOk(s, _) :- try { false } | warning $[This sections is not yet implemented].
  sectionsOk maps sectionOk(*, list(*))

  sectionOk(s, Section(_, defs)) :- defsOk(s, defs).

  defOk : scope * Definition
  defOk(_,_) :- // TO-DO
    try { false } | warning $[This definition is not yet implemented].

  defsOk maps defOk(*, list(*))

  stmtOk : scope * scope * Statement * TYPE // TYPE argument is the return type in a function
  stmtOk(_, _, stmt, _) :- try { false } | warning $[This statement is not yet implemented] @stmt.

  stmtsOk : scope * list(Statement) * TYPE
  stmtsOk(_, [], _).
  stmtsOk(s, [stmt | tail], rt) :- {s_next}
    new s_next, s_next -P-> s,
    stmtOk(s, s_next, stmt, rt),
    stmtsOk(s_next, tail, rt).

  expOk : scope * Exp
  expOk(s, exp) :- {T}
    typeOfExp(s, exp) == T.

  declareBuiltIns : scope
  declareBuiltIns(s) :-
    declareFunctionIns(s),
    declareEntityBuiltIns(s),
    declareTypeBuiltIns(s),
    declareTypeBuiltInFunctions(s),
    declareUIBuiltIns(s).

rules // typing

  typesOfExps maps typeOfExp(*, list(*)) = list(*)
  typeOfExp : scope * Exp -> TYPE
  typeOfExp(s, exp) = UNTYPED() :- try { false } | warning $[typing of expression [exp] is not yet implemented].

  typeOfExpTyped : scope * Exp -> TYPE
  typeOfExpTyped(s, exp) = t :-
    t == typeOfExp(s, exp),
    t != UNTYPED() | error $[Cannot resolve type [t]] @exp.

  typeOfSimpleExp : scope * SimpleExp -> TYPE
  typeOfSimpleExp(s, exp) = UNTYPED() :- try { false } | warning $[typing of expression [exp] is not yet implemented].

  typeOfPlaceholderExp : scope * PHExp -> TYPE
  typeOfPlaceholderExp(s, exp) = UNTYPED() :- try { false } | warning $[typing of expression [exp] is not yet implemented].

  typesCompatible : list(TYPE) * list(TYPE) -> BOOL
  typesCompatible([], []) = TRUE().
  typesCompatible([], [_|_]) = FALSE().
  typesCompatible([_|_], []) = FALSE().
  typesCompatible([t1|t1s], [t2|t2s]) = andB(typeCompatibleB(t1, t2), typesCompatible(t1s, t2s)).

  typesCompatibleWith maps typeCompatible(*, list(*))
  typeCompatible : TYPE * TYPE
  typeCompatible(T1, T2) :- typeCompatibleB(T1, T2) == TRUE().

  typeCompatibleB : TYPE * TYPE -> BOOL
  typeCompatibleB(T1, T2) = FALSE(). //default
  typeCompatibleB(T, T) = TRUE(). // same type is always type compatible

rules // utils

  or : BOOL * BOOL
  or(b1, b2) :- orB(b1, b2) == TRUE().
  orB : BOOL * BOOL -> BOOL
  orB(_, _) = FALSE().
  orB(TRUE(), _) = TRUE().
  orB(FALSE(), TRUE()) = TRUE().

  andB : BOOL * BOOL -> BOOL
  andB(_, _) = FALSE().
  andB(TRUE(), TRUE()) = TRUE().

  equalB : BOOL * BOOL
  equalB(b, b).
  equalB(_, _) :- false.

  notB : BOOL -> BOOL
  notB(TRUE()) = FALSE().
  notB(FALSE()) = TRUE().

  minOfList : list(int) -> int
  minOfList([]) = 100000.
  minOfList([x|xs]) = z :- {y}
    y == minOfList(xs),
    z #= min(x,y).

  scopeFromPath : path -> scope
  scopeFromPath(_PathEmpty(s)) = s.
  scopeFromPath(_PathStep(_, _, s)) = s.

  pathLength : path -> int
  pathLength(_PathEmpty(_)) = 0.
  pathLength(_PathStep(p, _, _)) = x :- {x'}
    x' == pathLength(p),
    x #= x' + 1.

  noDuplicatesString : string * list(string)
  noDuplicatesString(_, []).
  noDuplicatesString(x, [x | _]) :- false.
  noDuplicatesString(x, ["_IGNORE" | ys]) :- noDuplicatesString(x, ys).
  noDuplicatesString(x, [y | ys]) :- noDuplicatesString(x, ys).

  addQueryResults : list((path * (string * TYPE))) * list((path * (string * TYPE))) -> list((path * (string * TYPE)))
  addQueryResults([], ls) = ls.
  addQueryResults([hd | tl], ls) = [hd | addQueryResults(tl, ls)].

  // functional rule to drop all results with longer paths than the minimal
  filterShortestPath : list((path * (string * TYPE))) -> list((path * (string * TYPE)))
  filterShortestPath(ps) = filterShortestPath_internal(zipQueryResultsWithPathLength(ps), shortestPathLength(ps)).

  filterShortestPath_internal : list((int * (path * (string * TYPE)))) * int -> list((path * (string * TYPE)))
  filterShortestPath_internal([], _) = [].
  filterShortestPath_internal([(x, r) | ps], x) = [r | filterShortestPath_internal(ps, x)].
  filterShortestPath_internal([_      | ps], x) = filterShortestPath_internal(ps, x).

  shortestPathLength : list((path * (string * TYPE))) -> int
  shortestPathLength([]) = 10000.
  shortestPathLength([(p, _) | ps]) = z :- {x y}
    x == pathLength(p),
    y == shortestPathLength(ps),
    z #= min(x, y).

  zipQueryResultsWithPathLength maps zipQueryResultWithPathLength(list(*)) = list(*)
  zipQueryResultWithPathLength : (path * (string * TYPE)) -> (int * (path * (string * TYPE)))
  zipQueryResultWithPathLength(r@(p, _)) = (pathLength(p), r).
