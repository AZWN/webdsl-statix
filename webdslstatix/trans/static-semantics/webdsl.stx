module static-semantics/webdsl

imports
  signatures/webdsl-statix-sig

  static-semantics/actions/binops
  static-semantics/actions/built-ins
  static-semantics/actions/functions
  static-semantics/webdsl-ac
  static-semantics/webdsl-actions
  static-semantics/webdsl-entities
  static-semantics/webdsl-modules
  static-semantics/webdsl-types
  static-semantics/webdsl-ui

signature

  sorts
    TYPE // semantic type
    BOOL // used as return values of functional constraints
    FUNSIG = (list(TYPE) * TYPE) // type alias for a function signature
    TEMPLATESIG = (list(TYPE) * list((string * list(TYPE)))) // type alias for a template signature

  constructors
    TRUE : BOOL
    FALSE : BOOL

  namespaces
    ExtendEntity : string

    Function : string
    Ui : string

  name-resolution
    labels
      P       // parent edge label for consecutive statements
      F       // function edge label for embedding functions, templates and pages in a scope
      EXTEND  // extend edge label for extending entities
      INHERIT // inherit edge label for subclasses
      IMPORT  // import edge label for importing the global scope and other modules
    resolve
      ExtendEntity
      filter P* F* EXTEND? INHERIT* IMPORT*
      min $ < P, $ < F, $ < EXTEND, $ < INHERIT, $ < IMPORT, P < F, P < EXTEND, P < INHERIT, P < IMPORT, F < EXTEND, F < INHERIT, F < IMPORT, EXTEND < INHERIT, EXTEND < IMPORT, INHERIT < IMPORT
    resolve
      Function
      filter P* F* EXTEND? (INHERIT EXTEND?)* IMPORT*
    resolve
      Ui
      filter P* F* EXTEND? (INHERIT EXTEND?)* IMPORT*
      min $ < P, $ < F, $ < EXTEND, $ < INHERIT, $ < IMPORT, P < F, P < EXTEND, P < INHERIT, P < IMPORT, F < EXTEND, F < INHERIT, F < IMPORT, EXTEND < INHERIT, EXTEND < IMPORT, INHERIT < IMPORT

  relations
    typeOfDecl         : occurrence -> TYPE
    typeOfFunDecl      : occurrence -> FUNSIG
    typeOfTemplateDecl : occurrence -> TEMPLATESIG
    extendentity       : occurrence -> scope

    // entity name with corresponding scope
    entity : string -> scope

    // variable name with corresponding type
    var : string -> TYPE

    // module name with corresponding scope
    mod     : string -> scope

    // module name to module name that it imports
    // example: module a import b, c results in a -> b, a -> c
    import  : string -> string

rules // entity declaration and resolving

  declareEntity : scope * string * scope
  declareEntity(s, e, s_entity) :- {ps}
    !entity[e, s_entity] in s,
    resolveEntity(s, e) == ps@[(_, (_, s_entity))] | error $[Entity [e] is defined multiple times ([ps])] @e.

  resolveEntity : scope * string -> list((path * (string * scope)))
  resolveEntity(s, e) = ps :-
    query entity filter P* F* EXTEND? INHERIT* IMPORT*
                 and { e' :- e' == e }
                 min
                 and false
                 in s |-> ps.

rules // variable declaration and resolving

  declareVar : scope * string * TYPE
  declareVar(s, x, t) :-
    !var[x, t] in s,
    noDuplicateVarDefs(s, x).

  resolveVar : scope * string -> list((path * (string * TYPE)))
  resolveVar(s, x) = ps :-
    query var filter P* F* EXTEND? (INHERIT EXTEND?)* IMPORT*
              and { x' :- x' == x }
              min $ < P, $ < F, $ < EXTEND, $ < INHERIT, $ < IMPORT, P < F, P < EXTEND, P < INHERIT, P < IMPORT, F < EXTEND, F < INHERIT, F < IMPORT, EXTEND < INHERIT, EXTEND < IMPORT, INHERIT < IMPORT
              and false
              in s |-> ps.

  resolveProperty : scope * string -> list((path * (string * TYPE)))
  resolveProperty(s_entity, x) = ps :-
    query var filter EXTEND? (INHERIT EXTEND?)*
              and { x' :- x' == x }
              in s_entity |-> ps.

  // map does not suffice here due to list of tuples
  declareVars : scope * list((string * TYPE))
  declareVars(s, []).
  declareVars(s, [(x, t)|tail]) :-
    declareVar(s, x, t),
    declareVars(s, tail).

rules // module and import declaration and resolving

  declareMod : scope * string * scope
  declareMod(s, m, s_mod) :-
    !mod[m, s_mod] in s,
    resolveMod(s, m) == [_] | error $[Module [m] is already declared].

  resolveMod : scope * string -> list((path * (string * scope)))
  resolveMod(s, m) = mods :-
    query mod
      filter e and { m' :- m' == m }
      min and true
      in s |-> mods.

  declareImport : scope * string * string
  declareImport(s, x, y) :-
    !import[x, y] in s,
    !import[y, x] in s.

  resolveImport : scope * string -> list((path * (string * string)))
  resolveImport(s, x) = imports :-
    query import
      filter e and { x' :- x' == x }
      min and true
      in s |-> imports.

rules // declare common rules and mappings

  unitOk : scope * Unit
  unitOk(_, _) :- false | error $[This unit is not yet implemented].

  sectionOk : scope * Section
  sectionOk(s, _) :- false | error $[This sections is not yet implemented].
  sectionsOk maps sectionOk(*, list(*))

  sectionOk(s, Section(_, defs)) :- defsOk(s, defs).

  defOk : scope * Definition
  defOk(_,_) :- false | error $[This definition is not yet implemented].
  defsOk maps defOk(*, list(*))

  stmtOk : scope * scope * Statement * TYPE // TYPE argument is the return type in a function
  stmtOk(_, _, stmt, _) :- false | error $[This statement is not yet implemented] @stmt.

  stmtsOk : scope * list(Statement) * TYPE
  stmtsOk(_, [], _).
  stmtsOk(s, [stmt | tail], rt) :- {s_next}
    new s_next, s_next -P-> s,
    stmtOk(s, s_next, stmt, rt),
    stmtsOk(s_next, tail, rt).

  expOk : scope * Exp
  expOk(s, exp) :- {T}
    typeOfExp(s, exp) == T.

rules // typing

  typesOfExps maps typeOfExp(*, list(*)) = list(*)
  typeOfExp : scope * Exp -> TYPE
  typeOfExp(s, exp) = UNTYPED() :- false | error $[typing of expression [exp] is not yet implemented].

  typeOfSimpleExp : scope * SimpleExp -> TYPE
  typeOfSimpleExp(s, exp) = UNTYPED() :- false | error $[typing of expression [exp] is not yet implemented].

  typesCompatible : list(TYPE) * list(TYPE) -> BOOL
  typesCompatible([], []) = TRUE().
  typesCompatible([], [_|_]) = FALSE().
  typesCompatible([_|_], []) = FALSE().
  typesCompatible([t1|t1s], [t2|t2s]) = andB(typeCompatibleB(t1, t2), typesCompatible(t1s, t2s)).

  typesCompatibleWith maps typeCompatible(*, list(*))
  typeCompatible : TYPE * TYPE
  typeCompatible(T1, T2) :- typeCompatibleB(T1, T2) == TRUE().

  typeCompatibleB : TYPE * TYPE -> BOOL
  typeCompatibleB(T1, T2) = FALSE(). //default
  typeCompatibleB(T, T) = TRUE(). // same type is always type compatible

rules // utils

  orB : BOOL * BOOL -> BOOL
  orB(_, _) = FALSE().
  orB(TRUE(), _) = TRUE().
  orB(FALSE(), TRUE()) = TRUE().

  andB : BOOL * BOOL -> BOOL
  andB(_, _) = FALSE().
  andB(TRUE(), TRUE()) = TRUE().

  equalB : BOOL * BOOL
  equalB(b, b).
  equalB(_, _) :- false.

  minOfList : list(int) -> int
  minOfList([]) = 100000.
  minOfList([x|xs]) = z :- {y}
    y == minOfList(xs),
    z #= min(x,y).

  pathLength : path -> int
  pathLength(_PathEmpty(_)) = 0.
  pathLength(_PathStep(p, _, _)) = x :- {x'}
    x' == pathLength(p),
    x #= x' + 1.
