module static-semantics/webdsl-types

imports
  static-semantics/types/built-ins
  static-semantics/types/type-extensions

  static-semantics/webdsl

signature

  constructors // semantic types

    // list of argument types, return type
    // and BOOL that indicates if function is static or not
    FUNCTION : list(TYPE) * TYPE * BOOL -> TYPE

    ENTITY       : scope -> TYPE
    STATICENTITY : scope -> TYPE

    NATIVECLASS       : scope -> TYPE
    STATICNATIVECLASS : scope -> TYPE

    PAGE     : list(TYPE) -> TYPE
    TEMPLATE : list(TYPE) -> TYPE

    LIST : TYPE -> TYPE
    SET  : TYPE -> TYPE
    REF  : TYPE -> TYPE

    // built-in types such as Int, String, DateTime, etc.
    BUILTINTYPE : string * scope -> TYPE
    STATICBUILTINTYPE : string * scope -> TYPE

    PLACEHOLDER : TYPE
    REGEX            : TYPE
    VOID             : TYPE
    TEMPLATEELEMENTS : TYPE
    NULL            : TYPE
    UNTYPED         : TYPE

rules // types of constant expressions

  typeOfExp(_, exp@Null()) = NULL() :-
    @exp.type := NULL().

  typeOfExp(s, Const(exp@Int(_))) = t :-
    t == int(s),
    @exp.type := t.

  typeOfExp(s, Const(exp@Long(_))) = t :-
    t == long(s),
    @exp.type := t.

  typeOfExp(s, Const(exp@Float(_))) = t :-
    t == float(s),
    @exp.type := t.

  typeOfExp(s, exp@True()) = t :-
    t == bool(s),
    @exp.type := t.

  typeOfExp(s, exp@False()) = t :-
    t == bool(s),
    @exp.type := t.

  typeOfExp(s, Const(exp@StringConst(str))) = t :-
    t == string(s),
    stringOk(s, str),
    @exp.type := t.

  stringOk : scope * String
  stringOk(s, String(parts)) :- stringPartsOk(s, parts).

  stringPartsOk maps stringPartOk(*, list(*))
  stringPartOk : scope * StringPart
  stringPartOk(s, StringValue(_)).
  stringPartOk(s, InterpExp(exp)) :- typed(s, exp).
  stringPartOk(s, InterpValue(InterpSimpleExp(simple_exp))) :-
    inequalType(typeOfSimpleExp(s, simple_exp), UNTYPED()).

rules // type compatibility of constants

  // numeric types
  typeCompatibleB(BUILTINTYPE("Long", _), BUILTINTYPE("Int", _)) = TRUE().
  typeCompatibleB(BUILTINTYPE("Int", _), BUILTINTYPE("Long", _)) = TRUE().

  // string types
  typeCompatibleB(BUILTINTYPE("String", _), T2)      = isStringCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("Secret", _), T2)      = isStringCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("Email", _), T2)       = isStringCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("URL", _), T2)         = isStringCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("WikiText", _), T2)    = isStringCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("Text", _), T2)        = isStringCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("Patch", _), T2)       = isStringCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("Placeholder", _), T2) = isStringCompatibleTypeB(T2).

  // date types
  typeCompatibleB(BUILTINTYPE("Date", _), T2)     = isDateCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("DateTime", _), T2) = isDateCompatibleTypeB(T2).
  typeCompatibleB(BUILTINTYPE("Time", _), T2)     = isDateCompatibleTypeB(T2).

  // misc
  typeCompatibleB(LIST(T1), LIST(T2)) = typeCompatibleB(T1, T2).
  typeCompatibleB(SET(T1), SET(T2))   = typeCompatibleB(T1, T2).
  typeCompatibleB(NULL(), _) = TRUE().

rules // utils

  isDateCompatibleType : TYPE
  isDateCompatibleType(t) :- isDateCompatibleTypeB(t) == TRUE().

  isDateCompatibleTypeB : TYPE -> BOOL
  isDateCompatibleTypeB(_)                          = FALSE().
  isDateCompatibleTypeB(BUILTINTYPE("Date", _))     = TRUE().
  isDateCompatibleTypeB(BUILTINTYPE("DateTime", _)) = TRUE().
  isDateCompatibleTypeB(BUILTINTYPE("Time", _))     = TRUE().

  isStringCompatibleType : TYPE
  isStringCompatibleType(t) :- isStringCompatibleTypeB(t) == TRUE().

  isStringCompatibleTypeB : TYPE -> BOOL
  isStringCompatibleTypeB(_)             = FALSE().
  isStringCompatibleTypeB(BUILTINTYPE("String", _))      = TRUE().
  isStringCompatibleTypeB(BUILTINTYPE("Secret", _))      = TRUE().
  isStringCompatibleTypeB(BUILTINTYPE("Email", _))       = TRUE().
  isStringCompatibleTypeB(BUILTINTYPE("URL", _))         = TRUE().
  isStringCompatibleTypeB(BUILTINTYPE("WikiText", _))    = TRUE().
  isStringCompatibleTypeB(BUILTINTYPE("Text", _))        = TRUE().
  isStringCompatibleTypeB(BUILTINTYPE("Patch", _))       = TRUE().
  isStringCompatibleTypeB(PLACEHOLDER()) = TRUE().

rules // map sorts to semantic types

  typeOfSortTyped : scope * Sort -> TYPE
  typeOfSortTyped(s, sort) = t :-
    t == typeOfSort(s, sort),
    t != UNTYPED() | error $[Cannot resolve type [t]].

  typesOfSorts maps typeOfSort(*, list(*)) = list(*)
  typeOfSort : scope * Sort -> TYPE
  typeOfSort(_, _) = UNTYPED(). // untyped by default
  typeOfSort(s, SimpleSort("Int")) = int(s).
  typeOfSort(s, SimpleSort("Float")) = float(s).
  typeOfSort(s, SimpleSort("Long")) = long(s).

  typeOfSort(s, SimpleSort("String")) = string(s).
  typeOfSort(s, SimpleSort("Secret")) = secret(s).
  typeOfSort(s, SimpleSort("Email")) = email(s).
  typeOfSort(s, SimpleSort("URL")) = url(s).
  typeOfSort(s, SimpleSort("WikiText")) = wikitext(s).
  typeOfSort(s, SimpleSort("Text")) = text(s).
  typeOfSort(s, SimpleSort("Patch")) = patch(s).
  typeOfSort(_, SimpleSort("Placeholder")) = PLACEHOLDER().

  typeOfSort(s, SimpleSort("Date")) = date(s).
  typeOfSort(s, SimpleSort("DateTime")) = datetime(s).
  typeOfSort(s, SimpleSort("Time")) = time(s).

  typeOfSort(_, SimpleSort("Regex")) = REGEX().
  typeOfSort(s, SimpleSort("Bool")) = bool(s).
  typeOfSort(_, SimpleSort("Void")) = VOID().
  typeOfSort(s, SimpleSort("UUID")) = uuid(s).
  typeOfSort(_, SimpleSort("TemplateElements")) = TEMPLATEELEMENTS().
  typeOfSort(s, SimpleSort("File")) = file(s).
  typeOfSort(s, SimpleSort("Image")) = image(s).

  // in case it's not a built in simple sort, it must be an entity
  typeOfSort(s, SimpleSort(x)) = definedType(s, x).

  typeOfSort(s, GenericSort("List", [innerSort])) = LIST(typeOfSort(s, innerSort)).
  typeOfSort(s, GenericSort(_, _)) = UNTYPED() :- false | error $[Only lists and sets with one type parameter are supported].
  typeOfSort(s, GenericSort("Set", [innerSort])) = SET(typeOfSort(s, innerSort)).

  typeOfSort(s, RefSort(innerSort)) = REF(typeOfSort(s, innerSort)).

rules // WebDSL definition of being a simple type: built-in simple sort (no generics, no ref, no entity etc)

  isBuiltInType : TYPE
  isBuiltInType(t) :- isBuiltInTypeB(t) == TRUE().

  isBuiltInTypeB: TYPE -> BOOL
  isBuiltInTypeB(_) = FALSE(). // not a simple type by default
  isBuiltInTypeB(BUILTINTYPE(_, _)) = TRUE().

rules // type related expressions

  typeOfExp(s, Cast(exp, sort)) = t' :- {t}
    t  == typeOfExpTyped(s, exp),
    t' == typeOfSortTyped(s, sort),
    or(typeCompatibleB(t, t'), typeCompatibleB(t', t)) | error $[Type [t] cannot be cast to [t']].

  typeOfExp(s, IsA(exp, sort)) = bool(s) :- {t t'}
    t  == typeOfExpTyped(s, exp),
    t' == typeOfSortTyped(s, sort).

rules // resolve reference types

  definedType : scope * string -> TYPE
  definedType(s, name) = t :- {name'}
    resolveType(s, name) == [(_, (name', t))|_] | error $[Type [name] is not defined],
    @name.ref := name'.

  definedTypeNoRef : scope * string -> TYPE
  definedTypeNoRef(s, name) = t :- {name'}
    resolveType(s, name) == [(_, (name', t))|_] | error $[Type [name] is not defined].

  variableType : scope * string -> TYPE
  variableType(s, x) = t :- {x'}
    resolveVar(s, x) == [(_, (x', t))|_] | error $[Variable [x] is not defined],
    @x.ref := x'.

  propertyTypes maps propertyType(*, list(*)) = list(*)
  propertyType : scope * string -> TYPE
  propertyType(s, x) = t :- {x'}
    resolveProperty(s, x) == [(_, (x', t))] | error $[Property [x] is not defined] @x,
    @x.ref := x'.

  pageType : scope * string -> TYPE
  pageType(s, p) = t :- {p'}
    resolvePage(s, p) == [(_, (p', t@PAGE(_)))|_] | error $[Page [p] not defined],
    @p.ref := p'.

rules // utils

  typed : scope * Exp
  typed(s, exp) :- inequalType(typeOfExp(s, exp), UNTYPED()).

  inequalType : TYPE * TYPE
  inequalType(T1, T2) :- equalTypeB(T1, T2) == FALSE().

  equalType : TYPE * TYPE
  equalType(T1, T2) :- equalTypeB(T1, T2) == TRUE().

  equalTypeB : TYPE * TYPE -> BOOL
  equalTypeB(T, T) = TRUE().
  equalTypeB(_, _) = FALSE().
