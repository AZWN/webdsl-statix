module static-semantics/webdsl-types

imports
  static-semantics/webdsl

signature

  constructors // semantic types
    FUNCTION : list(TYPE) * TYPE                        -> TYPE // list of arguments and return type
    ENTITY   : scope                                    -> TYPE
    PAGE     : list(TYPE)                               -> TYPE
    TEMPLATE : list(TYPE) * list((string * list(TYPE))) -> TYPE

    LIST : TYPE -> TYPE
    SET  : TYPE -> TYPE
    REF  : TYPE -> TYPE

    // numeric types
    INT           : TYPE
    FLOAT         : TYPE
    LONG          : TYPE
    TIMEINTERVAL  : TYPE

    // string types
    STRING      : TYPE
    SECRET      : TYPE
    EMAIL       : TYPE
    URL         : TYPE
    WIKITEXT    : TYPE
    TEXT        : TYPE
    PATCH       : TYPE
    PLACEHOLDER : TYPE

    // time types
    DATE      : TYPE
    DATETIME  : TYPE
    TIME      : TYPE

    // other
    REGEX            : TYPE
    BOOL             : TYPE
    VOID             : TYPE
    UUID             : TYPE
    TEMPLATEELEMENTS : TYPE
    FILE             : TYPE
    IMAGE            : TYPE
    OBJECT           : TYPE

    NULL            : TYPE
    ABSTRACTENTITY  : TYPE
    UNTYPED         : TYPE

rules // types of constant expressions

  typeOfExp(_, exp@Null()) = NULL() :-
    @exp.type := NULL().

  typeOfExp(_, Const(exp@Int(_))) = INT() :-
    @exp.type := INT().

  typeOfExp(_, Const(exp@Long(_))) = LONG() :-
    @exp.type := LONG().

  typeOfExp(_, Const(exp@Float(_))) = FLOAT() :-
    @exp.type := FLOAT().

  typeOfExp(_, Const(exp@StringConst(_))) = STRING() :-
    // TO-DO: check expressions in string parts
    @exp.type := STRING().

  typeOfExp(_, exp@True()) = BOOL() :-
    @exp.type := BOOL().

  typeOfExp(_, exp@False()) = BOOL() :-
    @exp.type := BOOL().


rules // type compatibility of constants

  // numeric types 
  typeCompatible(LONG(), INT()) = TRUE().
  typeCompatible(INT(), LONG()) = TRUE().

  // string types
  typeCompatible(STRING(), T2)      = TRUE() :- isStringCompatibleType(T2).
  typeCompatible(SECRET(), T2)      = TRUE() :- isStringCompatibleType(T2).
  typeCompatible(EMAIL(), T2)       = TRUE() :- isStringCompatibleType(T2).
  typeCompatible(URL(), T2)         = TRUE() :- isStringCompatibleType(T2).
  typeCompatible(WIKITEXT(), T2)    = TRUE() :- isStringCompatibleType(T2).
  typeCompatible(TEXT(), T2)        = TRUE() :- isStringCompatibleType(T2).
  typeCompatible(PATCH(), T2)       = TRUE() :- isStringCompatibleType(T2).
  typeCompatible(PLACEHOLDER(), T2) = TRUE() :- isStringCompatibleType(T2).

  // date types
  typeCompatible(DATE(), T2)     = TRUE() :- isDateCompatibleType(T2).
  typeCompatible(DATETIME(), T2) = TRUE() :- isDateCompatibleType(T2).
  typeCompatible(TIME(), T2)     = TRUE() :- isDateCompatibleType(T2).

  // misc
  typeCompatible(NULL(), _) = TRUE().

rules // utils

  isDateCompatibleType : TYPE
  isDateCompatibleType(_) :- false.
  isDateCompatibleType(DATE()).
  isDateCompatibleType(DATETIME()).
  isDateCompatibleType(TIME()).

  isStringCompatibleType : TYPE
  isStringCompatibleType(_) :- false.
  isStringCompatibleType(STRING()).
  isStringCompatibleType(SECRET()).
  isStringCompatibleType(EMAIL()).
  isStringCompatibleType(URL()).
  isStringCompatibleType(WIKITEXT()).
  isStringCompatibleType(TEXT()).
  isStringCompatibleType(PATCH()).
  isStringCompatibleType(PLACEHOLDER()).

rules // map sorts to semantic types

  typesOfSorts maps typeOfSort(*, list(*)) = list(*)
  typeOfSort : scope * Sort -> TYPE
  typeOfSort(_, _) = UNTYPED(). // untyped by default
  typeOfSort(_, SimpleSort("Int")) = INT().
  typeOfSort(_, SimpleSort("Float")) = FLOAT().
  typeOfSort(_, SimpleSort("Long")) = LONG().
  typeOfSort(_, SimpleSort("TimeInterval")) = TIMEINTERVAL().

  typeOfSort(_, SimpleSort("String")) = STRING().
  typeOfSort(_, SimpleSort("Secret")) = SECRET().
  typeOfSort(_, SimpleSort("Email")) = EMAIL().
  typeOfSort(_, SimpleSort("URL")) = URL().
  typeOfSort(_, SimpleSort("WikiText")) = WIKITEXT().
  typeOfSort(_, SimpleSort("Text")) = TEXT().
  typeOfSort(_, SimpleSort("Patch")) = PATCH().
  typeOfSort(_, SimpleSort("Placeholder")) = PLACEHOLDER().

  typeOfSort(_, SimpleSort("Date")) = DATE().
  typeOfSort(_, SimpleSort("DateTime")) = DATETIME().
  typeOfSort(_, SimpleSort("Time")) = TIME().

  typeOfSort(_, SimpleSort("Regex")) = REGEX().
  typeOfSort(_, SimpleSort("Bool")) = BOOL().
  typeOfSort(_, SimpleSort("Void")) = VOID().
  typeOfSort(_, SimpleSort("UUID")) = UUID().
  typeOfSort(_, SimpleSort("TemplateElements")) = TEMPLATEELEMENTS().
  typeOfSort(_, SimpleSort("File")) = FILE().
  typeOfSort(_, SimpleSort("Image")) = IMAGE().
  typeOfSort(_, SimpleSort("Object")) = OBJECT().

  typeOfSort(_, SimpleSort("Entity")) = ABSTRACTENTITY().

  // in case it's not a built in simple sort, it must be an entity
  typeOfSort(s, SimpleSort(x)) = entityType(s, x).

  typeOfSort(s, GenericSort("List", [innerSort])) = LIST(typeOfSort(s, innerSort)).
  typeOfSort(s, GenericSort(_, _)) = UNTYPED() :- false | error $[Only lists and sets with one type parameter are supported].
  typeOfSort(s, GenericSort("Set", [innerSort])) = SET(typeOfSort(s, innerSort)).

  typeOfSort(s, RefSort(innerSort)) = REF(typeOfSort(s, innerSort)).

rules // WebDSL definition of being a simple type: built-in simple sort (no generics, no ref, no entity etc)

  isSimpleType: TYPE -> BOOL
  isSimpleType(_) = FALSE(). // not a simple type by default

  isSimpleType(INT()) = TRUE().
  isSimpleType(FLOAT()) = TRUE().
  isSimpleType(LONG()) = TRUE().

  isSimpleType(STRING()) = TRUE().
  isSimpleType(SECRET()) = TRUE().
  isSimpleType(EMAIL()) = TRUE().
  isSimpleType(URL()) = TRUE().
  isSimpleType(WIKITEXT()) = TRUE().
  isSimpleType(TEXT()) = TRUE().
  isSimpleType(PATCH()) = TRUE().
  isSimpleType(PLACEHOLDER()) = TRUE().

  isSimpleType(DATE()) = TRUE().
  isSimpleType(DATETIME()) = TRUE().
  isSimpleType(TIME()) = TRUE().

  isSimpleType(REGEX()) = TRUE().
  isSimpleType(BOOL()) = TRUE().
  isSimpleType(VOID()) = TRUE().
  isSimpleType(UUID()) = TRUE().
  isSimpleType(FILE()) = TRUE().
  isSimpleType(IMAGE()) = TRUE().
  isSimpleType(OBJECT()) = TRUE().

  isSimpleType(NULL()) = TRUE().

rules // resolve reference types

  entityType : scope * string -> TYPE
  entityType(s, e) = entity_type :- {e'}
    typeOfDecl of Entity{e} in s |-> [(_, (Entity{e'}, entity_type))|_] | error $[Entity [e] is not defined],
    @e.ref := e'.

  variableType : scope * string -> TYPE
  variableType(s, x) = t :- {x'}
    typeOfDecl of Variable{x} in s |-> [(_, (Variable{x'}, t))|_] | error $[Variable [x] is not defined],
    @x.ref := x'.

  propertyTypes maps propertyType(*, list(*)) = list(*)
  propertyType : scope * string -> TYPE
  propertyType(s_entity, x) = t :- {x'}
    query typeOfDecl filter EXTEND? (INHERIT EXTEND?)* and { Variable{v} :- v == x } min in s_entity |-> [(_, (Variable{x'}, t))] 
        | error $[Property [x] is not defined] @x,
    @x.ref := x'.

  pageType : scope * string -> TYPE
  pageType(s, p) = t :- {p'}
    typeOfDecl of Ui{p} in s |-> [(_, (Ui{p'}, t))|_] | error $[Page [p] not defined],
    @p.ref := p'.

rules // utils

  inequalType : TYPE * TYPE
  inequalType(T, T) :- false.
  inequalType(_, _).

  equalType : TYPE * TYPE
  equalType(T, T).
  equalType(_, _) :- false.
