module static-semantics/webdsl-ui

imports
  static-semantics/actions/functions

  static-semantics/ui/attributes
  static-semantics/ui/template-calls

  static-semantics/webdsl-actions
  static-semantics/webdsl-types
  static-semantics/webdsl

rules // page definitions

  defOk(s_global, TemplateDefinition(DefinePage(mods, x, FormalArgs(fargs), TemplateArgs(targs), elements))) :- {fargTypes s_page s_body}
    // TO-DO: analyse mods
    targs == [] | error $[Template arguments are not allowed on page definitions] @targs,
    new s_page, s_page -F-> s_global,
    fargTypes == typesOfArgs(s_global, fargs),
    declareVars(s_page, zipArgTypes(fargs, fargTypes)),
    new s_body, s_body -P-> s_page,
    declarePage(s_global, x, fargTypes),
    templateElementsOk(s_body, elements).

rules // template definitions

  defOk(s_global, TemplateDefinition(DefineTemplate(mods, t, FormalArgs(fargs), TemplateArgs(targs), elements))) :- {fargTypes targTypes s_template s_body}
    // TO-DO: analyse mods
    new s_template, s_template -F-> s_global,
    fargTypes == typesOfArgs(s_global, fargs),
    targTypes == typesOfTemplateArgs(s_global, targs),
    declareVars(s_template, zipArgTypes(fargs, fargTypes)),
    declTArgs(s_template, targTypes),
    new s_body, s_body -P-> s_template,
    declTemplate(s_global, t, fargTypes, targTypes),
    templateElementsOk(s_body, elements).

  declTemplate : scope * string * list(TYPE) * list((string * list(TYPE)))
  declTemplate(s, t, fargTypes, targTypes) :- {result}
    declareTemplate(s, t, fargTypes),
    resolveTemplate(s, t) == result,
    amountOfTemplateDeclsWithArgs(result, fargTypes, 0) == 1
      | error $[Duplicate definition of template [t] with argument types [fargTypes]] @t.

  declTArgs maps declTArg(*, list(*))
  declTArg : scope * (string * list(TYPE))
  declTArg(s, (t, argTypes)) :-
    declTemplate(s, t, argTypes, []).

  // helper function that results in the amount of template definitions with the given argument types
  amountOfTemplateDeclsWithArgs : list((path *(string * TYPE))) * list(TYPE) * int -> int
  amountOfTemplateDeclsWithArgs([], _, n) = n.
  amountOfTemplateDeclsWithArgs([ (_, (_, TEMPLATE(args))) | tail], args, n) = amountOfTemplateDeclsWithArgs(tail, args, i) :- i #= n + 1.
  amountOfTemplateDeclsWithArgs([ _ | tail], args, n) = amountOfTemplateDeclsWithArgs(tail, args, n).

rules // template elements

  templateElementOk : scope * scope * TemplateElement // TYPE argument is the return type in a function
  templateElementOk(_, _, e) :- false | error $[This template element is not yet implemented] @e.

  templateElementsOk : scope * list(TemplateElement)
  templateElementsOk(_, []).
  templateElementsOk(s, [element | tail]) :- {s_next}
    new s_next, s_next -P-> s,
    templateElementOk(s, s_next, element),
    templateElementsOk(s_next, tail).

  templateElementOk(s, _, Text(parts)) :-
    stringPartsOk(s, parts).

  templateElementOk(s, _, XMLComment(_)).

  templateElementOk(s, _, XMLEmptyElement(_, attributes)) :-
    attributesOk(s, attributes).

  templateElementOk(s, _, XMLEmptyElementUnclosed(_, attributes)) :-
    attributesOk(s, attributes).

  templateElementOk(s, _, XMLElement(openTagName, attributes, elements, closeTagName)) :-
    openTagName == closeTagName | error $[Opening and closing tag do not match],
    attributesOk(s, attributes),
    templateElementsOk(s, elements).

  templateElementOk(s, _, JSElement(attributes, parts)) :-
    attributesOk(s, attributes),
    jsStringPartsOk(s, parts).

  templateElementOk(s, _, StyleElement(attributes, parts)) :-
    attributesOk(s, attributes),
    jsStringPartsOk(s, parts).

  jsStringPartsOk maps jsStringPartOk(*, list(*))
  jsStringPartOk : scope * JSPart
  jsStringPartOk(s, JSString(_)).
  jsStringPartOk(s, JSExp(exp)) :- typed(s, exp).

rules // var decls in templates

  templateElementOk(s, s_decl, TEVarDecl(TemplateVarDecl(x, sort))) :- {t}
    t == typeOfSort(s, sort),
    inequalType(t, UNTYPED()) | error $[Unknown type [sort]] @sort,
    declareVar(s_decl, x, t),
    @x.type := t.

  templateElementOk(s, s_decl, TEVarDecl(TemplateVarDeclInit(x, sort, exp))) :- {t}
    t == typeOfSort(s, sort),
    typeCompatible(typeOfExp(s, exp), t) | error $[Expression [exp] is not of type [sort]] @exp,
    declareVar(s_decl, x, t),
    @x.type := t.

  templateElementOk(s, s_decl, TEVarDecl(TemplateVarDeclInitInferred(x, exp))) :- {t}
    t == typeOfExp(s, exp),
    inequalType(t, UNTYPED()) | error $[Unable to infer type of [exp]] @exp,
    declareVar(s_decl, x, t),
    @x.type := t.

rules // utils

  rootPageDefined : scope * string
  rootPageDefined(s, errorLoc) :-
    resolvePage(s, "root") == [(_, (_, PAGE(_)))|_] | error $[No root page defined] @errorLoc.

  typesOfTemplateArgs maps typeOfTemplateArg(*, list(*)) = list(*)
  typeOfTemplateArg : scope * TemplateArg -> (string * list(TYPE))
  typeOfTemplateArg(s, TemplateArg(x, argSorts)) = (x, typesOfSorts(s, argSorts)).
