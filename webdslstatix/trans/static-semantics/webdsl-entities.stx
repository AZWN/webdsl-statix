module static-semantics/webdsl-entities

imports
  static-semantics/actions/functions
  static-semantics/webdsl-actions
  static-semantics/webdsl-types
  static-semantics/webdsl

rules // entity declaration

  // entity x : super { ... }
  defOk(s_global, e@Entity(x, super, bodydecs)) :- {s_entity super' s_super}
    resolveEntity(s_global, super) == [(_, (super', ENTITY(s_super)))] | error $[Entity [super] is not defined] @super,
    new s_entity, s_entity -INHERIT-> s_super,
    noCircularInheritance(s_entity) | error $[Circular inhertitance detected] @e,
    declEntity(s_global, s_entity, x, bodydecs),
    @super.ref := super'.

  // entity x { ... }
  defOk(s_global, EntityNoSuper(x, bodydecs)) :- {s_entity}
    new s_entity, s_entity -IMPORT-> s_global,
    declEntity(s_global, s_entity, x, bodydecs).

  // session x { ... }
  defOk(s_global, SessionEntity(x, bodydecs)) :- {s_entity entity_scopes}
    new s_entity, s_entity -IMPORT-> s_global,
    declEntity(s_global, s_entity, x, bodydecs).

  declEntity : scope * scope * string * list(EntityBodyDeclaration)
  declEntity(s_global, s_entity, entity_name, bodydecs) :-
    validEntityName(s_entity, entity_name),
    declareExtendEntity(s_global, entity_name, s_entity), // declare entity_scope to be linked to entity_name
    extendEntityScopes(resolveExtendEntity(s_global, entity_name), s_entity),
    declareEntity(s_global, entity_name, s_entity),
    declEntityBody(s_entity, bodydecs).

  validEntityName : scope * string
  validEntityName(s, x) :-
    equalB(isSimpleType(typeOfSort(s, SimpleSort(x))), FALSE()) | error $[Entity name [x] is not allowed] @x,
    x != "Entity" | error $[Entity name [x] is not allowed] @x.

  extendEntityScopes maps extendEntityScope(list(*), *)
  extendEntityScope : (path * (string * scope)) * scope
  extendEntityScope((_, (_, s)), s). // Do not inherit own scope
  extendEntityScope((_, (_, s')), s) :-
    s -EXTEND-> s'.

  // extend entity x { ... }
  defOk(s_global, ExtendEntity(x, bodydecs)) :- declExtendEntity(s_global, x, bodydecs).

  // extend session { ... }
  defOk(s_global, ExtendSessionEntity(x, bodydecs)) :- declExtendEntity(s_global, x, bodydecs).

  declExtendEntity : scope * string * list(EntityBodyDeclaration)
  declExtendEntity(s_global, entity_name, bodydecs) :- {s_extend_entity entity_scopes}
    resolveEntity(s_global, entity_name) == [_] | error $[Entity [entity_name] is not defined],
    new s_extend_entity,
    declareExtendEntity(s_global, entity_name, s_extend_entity), // declare entity_scope to be linked to entity_name
    extendEntityScopes(resolveExtendEntity(s_global, entity_name), s_extend_entity),
    declEntityBody(s_extend_entity, bodydecs).

  noCircularInheritance : scope
  noCircularInheritance(s_ent) :- {res}
    query () filter INHERIT+ and { s :- s == s_ent }
             min $ < INHERIT
             in s_ent |-> res,
    res == [].

rules // entity body declaration

  declEntityBodyDeclaration : scope * EntityBodyDeclaration
  declEntityBodyDeclaration(_, _) :- false | error $[This entity body declaration is not yet implemented].
  declEntityBody maps declEntityBodyDeclaration(*, list(*))

  // entity function
  declEntityBodyDeclaration(s, EntityFunction(f)) :- entityFunctionOk(s, f).
  declEntityBodyDeclaration(s, StaticEntityFunction(f)) :- entityFunctionOk(s, f).
  declEntityBodyDeclaration(s, CachedFunction(f)) :-
    canBeCached(s, f),
    entityFunctionOk(s, f).

  // entity property
  declEntityBodyDeclaration(s, Property(x, propkind, sort, annos)) :- {sortType}
    sortType == typeOfSort(s, sort),
    inequalType(sortType, UNTYPED()) | error $[Cannot resolve type [sort]] @sort,
    inequalType(sortType, VOID()) | error $[Property type 'Void' not allowed] @sort,
    inequalType(sortType, REF(_)) | error $[Reference type is not allowed in property] @sort,
    isValidTypeForPropKind(propkind, sort, sortType),
    declProperty(s, x, sortType).
    // TO-DO: check property annotations

  // derived entity property
  declEntityBodyDeclaration(s, DerivedProperty(x, propkind, sort, annos, exp)) :- {sortType}
    sortType == typeOfSort(s, sort),
    equalType(sortType, typeOfExp(s, exp)) | error $[Expression [exp] must be of type [sort]] @exp,
    declProperty(s, x, sortType).

  declProperties maps declProperty(*, list(*), list(*))
  declProperty : scope * string * TYPE
  declProperty(s, x, sortType) :-
    validPropertyName(x),
    declareVar(s, x, sortType),
    noDuplicateVarDefsInSuper(s, x) | error $[Cannot override existing entity property [x]] @x.
    // TO-DO: check property annotations

  validPropertyName : string
  validPropertyName(x) :-
    x != "id"       | error $[Cannot override the builtin property [x]] @x,
    x != "version"  | error $[Cannot override the builtin property [x]] @x,
    x != "created"  | error $[Cannot override the builtin property [x]] @x,
    x != "modified" | error $[Cannot override the builtin property [x]] @x,
    x != "class"    | error $[Cannot use the reserved property name [x]] @x.

  isValidTypeForPropKind : PropKind * Sort * TYPE
  isValidTypeForPropKind(Simple(), sort, sortType) :-
    equalB(isSimpleType(sortType), TRUE()) | error $[Expected simple type] @sort.

  isValidTypeForPropKind(Ref(), _, ENTITY(_)).
  isValidTypeForPropKind(Ref(), _, LIST(ENTITY(_))).
  isValidTypeForPropKind(Ref(), _, SET(ENTITY(_))).
  isValidTypeForPropKind(Ref(), sort, _) :-
    false | error $[Expected entity type or collection of an entity type] @sort.

  isValidTypeForPropKind(Comp(), _, ENTITY(_)).
  isValidTypeForPropKind(Comp(), _, LIST(ENTITY(_))).
  isValidTypeForPropKind(Comp(), _, SET(ENTITY(_))).
  isValidTypeForPropKind(Comp(), sort, _) :-
    false | error $[Expected entity type or collection of an entity type] @sort.

  isValidTypeForPropKind(AnyProp(), _, ENTITY(_)).
  isValidTypeForPropKind(AnyProp(), _, LIST(ENTITY(_))).
  isValidTypeForPropKind(AnyProp(), _, SET(ENTITY(_))).
  isValidTypeForPropKind(AnyProp(), sort, sortType) :-
    equalB(isSimpleType(sortType), TRUE()) | error $[Expected simple type or entity type or a collection of an entity type] @sort.

rules // entity resolving

  typeOfExp(s, exp@ObjectCreation(x, prop_assignments)) = ENTITY(s_entity) :-
    entityType(s, x) == ENTITY(s_entity),
    @exp.type := ENTITY(s_entity).
    // TO-DO: check prop assignments

rules // subtyping

  typeCompatibleB(ENTITY(s_sub), ENTITY(s_super)) = inherits(s_sub, s_super).

  inherits : scope * scope -> BOOL
  inherits(s_sub, s_super) = result :- {query_result}
    query () filter INHERIT* and { s :- s == s_super }
             min $ < INHERIT
             in s_sub |-> query_result,
    result == inheritsHelper(query_result).

  inheritsHelper : list((path * scope)) -> BOOL
  inheritsHelper(_) = FALSE().
  inheritsHelper([(_,_)]) = TRUE().

  inheritEdgesAmount : scope * scope -> int
  inheritEdgesAmount(s_sub, s_super) = pathLength(p) :-
    query () filter INHERIT* and { s :- s == s_super }
             min $ < INHERIT
             in s_sub |-> [(p, _)].
