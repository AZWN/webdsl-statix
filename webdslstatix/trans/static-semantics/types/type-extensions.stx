module static-semantics/types/type-extensions

imports
  static-semantics/actions/functions

  static-semantics/types/built-ins

  static-semantics/webdsl-entities
  static-semantics/webdsl-native
  static-semantics/webdsl-types
  static-semantics/webdsl

rules

  defOk(s, TypeDef(name, defs)) :- {s_type}
    builtInType(s, name) == BUILTINTYPE(name, _) | error $[Type [name] is not a built-in type],
    new s_type,
    declareExtendEntity(s, name, s_type), // declare s_type to be linked to other scopes from type name
    extendEntityScopes(resolveExtendEntity(s, name), s_type),
    typeElementsOk(s, s_type, defs).

  typeElementsOk maps typeElementOk(*, *, list(*))
  typeElementOk : scope * scope * TypeElement
  typeElementOk(s, s_type, TypeFunction(function)) :-
    nativeClassFunctionOk(s, s_type, function).

  typeElementOk(s, s_type, TypeFunctionFromStatic(NCFunctionFromStatic(_, function))) :-
    nativeClassFunctionOk(s, s_type, function).

  typeElementOk(s, s_type, TypeProperty(p, exp)) :- {s_t s_dt s_d}
    p                 == "format"  | error $[Only type property "format=<string>" is allowed for Time, Date and DateTime],
    typeOfExp(s, exp) == string(s) | error $[Only type property "format=<string>" is allowed for Time, Date and DateTime],
    time(s)           == BUILTINTYPE(_, s_t),
    datetime(s)       == BUILTINTYPE(_, s_dt),
    date(s)           == BUILTINTYPE(_, s_d),
    or(orB(
      extends(s_type, s_t),
      extends(s_type, s_dt)),
      extends(s_type, s_d))        | error $[Only type property "format=<string>" is allowed for Time, Date and DateTime].

rules // typing of expressions

  typeOfEntityFunctionCall(s, BUILTINTYPE(_, s_type), f, args) = typeOfFunctionCall_internal(s, f, args, funSigs) :-
    funSigs == resolveEntityFunction(s_type, f).

  typeOfEntityFunctionCall(s, STATICBUILTINTYPE(_, s_type), f, args) = typeOfFunctionCall_internal(s, f, args, funSigs) :-
    funSigs == resolveStaticEntityFunction(s_type, f).
