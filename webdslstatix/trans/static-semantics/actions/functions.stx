module static-semantics/actions/functions

imports
  static-semantics/webdsl-actions
  static-semantics/webdsl-entities
  static-semantics/webdsl-types
  static-semantics/webdsl

rules // functions

  typeOfExp(s, ThisCall2Exp(c@ThisCall(f, argExps))) = t :- {argTypes nameCompatibleFunSigs mostSpecificFunSigs f'}
    argTypes == typesOfExps(s, argExps),
    nameCompatibleFunSigs == nameCompatibleFunSigs(s, f),
    mostSpecificFunSigs == mostSpecificFunSigs(argTypes, typeCompatibleFunSigs(nameCompatibleFunSigs, argTypes)),
    mostSpecificFunSigs != [] | error $[No function definition with compatible argument types for function [f]] @c,
    mostSpecificFunSigs != [_|[_|_]] | error $[Multiple function definition with equally specific argument types for function [f]] @c,
    mostSpecificFunSigs == [(Function{f'}, (_, t))] | error $[Zero or multiple function definition with equally specific argument types for function [f]] @c,
    @f.ref := f',
    @f.type := t.

  typeOfExp(s, c@Call(exp, f, argExps)) = t :- {argTypes s_entity nameCompatibleFunSigs mostSpecificFunSigs f'}
    argTypes == typesOfExps(s, argExps),
    typeOfExp(s, exp) == ENTITY(s_entity),
    nameCompatibleFunSigs == nameCompatibleFunSigsInEntity(s_entity, f),
    mostSpecificFunSigs == mostSpecificFunSigs(argTypes, typeCompatibleFunSigs(nameCompatibleFunSigs, argTypes)),
    mostSpecificFunSigs != [] | error $[No function definition with compatible argument types for function [f]] @c,
    mostSpecificFunSigs != [_|[_|_]] | error $[Multiple function definition with equally specific argument types for function [f]] @c,
    mostSpecificFunSigs == [(Function{f'}, (_, t))] | error $[Zero or multiple function definition with equally specific argument types for function [f]] @c,
    //TO-DO: filter mostSpecificFunSigs for correct overriding according to known subtype at compile time
    @f.ref := f',
    @f.type := t.

  // global functions
  defOk(s, GlobalFunction(f)) :- globalFunctionOk(s, f).
  defOk(s, CachedGlobalFunction(f)) :-
    canBeCached(s, f),
    globalFunctionOk(s, f).

  // defOk(s, ExtendGlobalFunction(f)) :- functionOk(s, f). TO-DO: support function extensions

  // analyze a function:
  // - argument types and return type must be defined
  // - declare arguments as variables in function scope
  // - analyze function body
  // - declare function in given scope
  globalFunctionOk : scope * Function
  globalFunctionOk(s_outer, Function(name, FormalArgs(args), OptSortSome(returnSort), Block(stmts))) :- {argTypes returnType s_function s_body}
    returnType == typeOfSort(s_outer, returnSort),
    new s_function, s_function -F-> s_outer,
    argTypes == typesOfArgs(s_outer, args),
    declVars(s_function, zipArgTypes(args, argTypes)),
    new s_body, s_body -P-> s_function,
    stmtsOk(s_body, stmts, returnType),
    declFunctionGlobal(s_outer, name, argTypes, returnType).

  entityFunctionOk : scope * Function
  entityFunctionOk(s_outer, Function(name, FormalArgs(args), OptSortSome(returnSort), Block(stmts))) :- {argTypes returnType s_function s_body}
    returnType == typeOfSort(s_outer, returnSort),
    new s_function, s_function -F-> s_outer,
    argTypes == typesOfArgs(s_outer, args),
    declVars(s_function, zipArgTypes(args, argTypes)),
    new s_body, s_body -P-> s_function,
    stmtsOk(s_body, stmts, returnType),
    declFunctionEntity(s_outer, name, argTypes, returnType).

  // predicate that defines when a function can be cached
  canBeCached : scope * Function
  canBeCached(s, Function(function_name, FormalArgs([]), OptSortSome(returnSort), _)) :- inequalType(typeOfSort(s, returnSort), VOID()) | error $[Only functions that have a return type can be cached] @function_name.
  canBeCached(s, Function(function_name, FormalArgs([_|_]), _, _)) :- false | error $[Only functions without arguments can be cached] @function_name.

  // declare a function in a given scope
  // and define the relation typeOfFunDecl with signature (argument types  * return type)
  declFunctionGlobal : scope * string * list(TYPE) * TYPE
  declFunctionGlobal(s, name, argTypes, returnType) :-
    s -> Function{name} with typeOfFunDecl (argTypes, returnType),
    noDuplicateFunDefsGlobal(s, name, argTypes).

  declFunctionEntity : scope * string * list(TYPE) * TYPE
  declFunctionEntity(s, name, argTypes, returnType) :-
    s -> Function{name} with typeOfFunDecl (argTypes, returnType),
    noDuplicateFunDefsEntity(s, name, argTypes).

  // map syntactic types to semantic types
  typesOfArgs maps typeOfArg(*, list(*)) = list(*)
  typeOfArg : scope * FormalArg -> TYPE
  typeOfArg(s, Arg(_, sort)) = t :-
    t == typeOfSort(s, sort),
    inequalType(t, UNTYPED()) | error $[Unknown type [sort]] @sort.

  // create tuples of (arg_name * arg_type)
  zipArgTypes maps zipArgType(list(*), list(*)) = list(*)
  zipArgType : FormalArg * TYPE -> (string * TYPE)
  zipArgType(Arg(x, _), t) = (x, t).

  // predicate that defines when there are overlapping function signatures
  noDuplicateFunDefsGlobal : scope * string * list(TYPE)
  noDuplicateFunDefsGlobal(s, name, types) :- {result}
    typeOfFunDecl of Function{name} in s |-> result,
    amountOfFunDeclsWithArgs(result, types, 0) == 1
        | error $[Duplicate definition of function [name] with argument types [types]] @name.

  noDuplicateFunDefsEntity : scope * string * list(TYPE)
  noDuplicateFunDefsEntity(s, f, types) :- {result}
    query typeOfFunDecl filter EXTEND?
                        and { Function{f'} :- f' == f }
                        in s |-> result,
    amountOfFunDeclsWithArgs(result, types, 0) == 1
        | error $[Duplicate definition of function [f] with argument types [types]] @f.

  // helper function for noDuplicateFunDefs that counts the amount of function with a given name and argument types
  amountOfFunDeclsWithArgs : list((path * (occurrence * FUNSIG))) * list(TYPE) * int -> int
  amountOfFunDeclsWithArgs([], _, n) = n.
  amountOfFunDeclsWithArgs([(_, (_, (types, _))) | tail], types, n) = amountOfFunDeclsWithArgs(tail, types, i) :- i #= n + 1.
  amountOfFunDeclsWithArgs([(_, (_, (_    , _))) | tail], types, n) = amountOfFunDeclsWithArgs(tail, types, n).

rules  // rules and functions for function overloading

  nameCompatibleFunSigs : scope * string -> list((path * (occurrence * FUNSIG)))
  nameCompatibleFunSigs(s, f) = res :-
    typeOfFunDecl of Function{f} in s |-> res.

  nameCompatibleFunSigsInEntity : scope * string -> list((path * (occurrence * FUNSIG)))
  nameCompatibleFunSigsInEntity(s, f) = res :-
    query typeOfFunDecl filter EXTEND? (INHERIT EXTEND?)*
                        and { Function{f'} :- f' == f }
                        in s |-> res.

  // function that gets all functions with matching name and compatible argument types
  typeCompatibleFunSigs : list((path * (occurrence * FUNSIG))) * list(TYPE) -> list((occurrence * FUNSIG))
  typeCompatibleFunSigs(nameCompatibleFuncs, args) = result :- {funSigsZippedWithTypeCompatibility}
    funSigsZippedWithTypeCompatibility == zipFunSigsWithTypesCompatible(args, dropPaths(nameCompatibleFuncs)),
    result == filterCompatibleArgTypes(funSigsZippedWithTypeCompatibility).

  // helper function for typeCompatibleFunSigs that prunes the list
  // of functions based on the zipped BOOL with the function signature
  filterCompatibleArgTypes : list((BOOL * (occurrence * FUNSIG))) -> list((occurrence * FUNSIG))
  filterCompatibleArgTypes([]) = [].
  filterCompatibleArgTypes([(TRUE() , f) | fs]) = [f | filterCompatibleArgTypes(fs)].
  filterCompatibleArgTypes([(FALSE(), _) | fs]) = filterCompatibleArgTypes(fs).

  // helper function for typeCompatibleFunSigs that zips the
  // function signatures with whether the types are compatible with given argument types
  zipFunSigsWithTypesCompatible maps zipFunSigWithTypesCompatible(*, list(*)) = list(*)
  zipFunSigWithTypesCompatible : list(TYPE) * (occurrence * FUNSIG) -> (BOOL * (occurrence * FUNSIG))
  zipFunSigWithTypesCompatible(args, f@(_, (funArgs, _))) = (typesCompatible(args, funArgs), f).

  // function that prunes the list of compatible function signatures
  // to a list of most specific function signatures
  mostSpecificFunSigs : list(TYPE) * list((occurrence * FUNSIG)) -> list((occurrence * FUNSIG))
  mostSpecificFunSigs(args, []) = [].     // In case no functions are compatible, return empty list
  mostSpecificFunSigs(args, fs@[_]) = fs. // In case of only one compatible signature, return that
  mostSpecificFunSigs(args, sigs) = mostSpecificFunSigs_helper(args, sigs, existsMatchingFunSig(args, sigs)).

  // helper function for mostSpecificFunSigs that returns
  // the exactly matching signature if it exists,
  // else return the most specific (least inheritance) signatures
  mostSpecificFunSigs_helper : list(TYPE) * list((occurrence * FUNSIG)) * BOOL -> list((occurrence * FUNSIG))
  mostSpecificFunSigs_helper(args, sigs, TRUE())   = [matchingFunSig(args, sigs)].
  mostSpecificFunSigs_helper(args, sigs, FALSE())  = filterLeastInheritanceAmount(minOfList(inheritanceAmounts), zipInheritanceAmountWithFunSig(inheritanceAmounts, sigs)) :-
    inheritanceAmounts == inheritanceAmounts(args, sigs).

  // helper function for mostSpecificFunSigs that returns
  // whether an exactly matching function signature exists
  existsMatchingFunSig : list(TYPE) * list((occurrence * FUNSIG)) -> BOOL
  existsMatchingFunSig(args, []) = FALSE().
  existsMatchingFunSig(args, [(_, (args, _)) | _]) = TRUE().
  existsMatchingFunSig(args, [_ | fs]) = existsMatchingFunSig(args, fs).

  // helper function for mostSpecificFunSigs that returns the exactly matching signature
  matchingFunSig : list(TYPE) * list((occurrence * FUNSIG)) -> (occurrence * FUNSIG)
  matchingFunSig(args, [f@(_, (args, _)) | _]) = f.
  matchingFunSig(args, [_ | fs]) = matchingFunSig(args, fs).

  // function that computes the total amount of inheritance edges from caller arguments to defined arguments
  inheritanceAmounts maps inheritanceAmount(*, list(*)) = list(*)
  inheritanceAmount : list(TYPE) * (occurrence * FUNSIG) -> int
  inheritanceAmount(args, (_, (sigTypes, _))) = inheritanceAmount_helper(args, sigTypes).

  // helper function for getInheritanceAmount that computers the total amount of inheritance edges
  inheritanceAmount_helper : list(TYPE) * list(TYPE) -> int
  inheritanceAmount_helper([], []) = 0.
  inheritanceAmount_helper([ENTITY(s_arg) | argtl], [ENTITY(s_sig) | sigtl]) = x :- {y z}
    y == inheritEdgesAmount(s_arg, s_sig),
    z == inheritanceAmount_helper(argtl, sigtl),
    x #= y + z.

  // function that zips the inheritance amount with the function signature
  zipInheritanceAmountWithFunSig : list(int) * list((occurrence * FUNSIG)) -> list((int * (occurrence * FUNSIG)))
  zipInheritanceAmountWithFunSig([], []) = [].
  zipInheritanceAmountWithFunSig([x|xs], [y|ys]) = [(x, y) | zipInheritanceAmountWithFunSig(xs, ys)].

  // funciton that prunes the function signatures to only keep the lowest inheritance amount
  filterLeastInheritanceAmount : int * list((int * (occurrence * FUNSIG))) -> list((occurrence * FUNSIG))
  filterLeastInheritanceAmount(_, []) = [].
  filterLeastInheritanceAmount(x, [(x, sig) | sigtl]) = [sig | filterLeastInheritanceAmount(x, sigtl)].
  filterLeastInheritanceAmount(x, [_        | sigtl]) = filterLeastInheritanceAmount(x, sigtl).

  dropPaths maps dropPath(list(*)) = list(*)
  dropPath : (path * (occurrence * FUNSIG)) -> (occurrence * FUNSIG)
  dropPath((_, x)) = x.
