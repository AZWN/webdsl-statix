module static-semantics/webdsl-ac

imports
  static-semantics/webdsl-actions
  static-semantics/webdsl-entities
  static-semantics/webdsl-types
  static-semantics/webdsl

rules

  sectionOk(s, AccessControlDefinition(_, defs)) :- acDefsOk(s, defs).

  acDefsOk maps acDefOk(*, list(*))
  acDefOk : scope * AccessControlDefinition
  acDefOk(_,_) :- false | error $[This access control definition is not yet supported].

  defOk(s, AccessControlPrincipalDef(ent, properties)) :- principalDefOk(s, ent, properties).
  acDefOk(s, AccessControlPrincipalAcDef(ent, properties)) :- principalDefOk(s, ent, properties).

  principalDefOk : scope * string * list(string)
  principalDefOk(s, ent, properties) :- {s_ent credential_types}
    entityType(s, ent) == ENTITY(s_ent),
    propertyTypes(s_ent, properties) == credential_types,
    compatibleCredentialTypes(properties, credential_types),
    declSecurityContext(s, properties, credential_types).

  compatibleCredentialTypes maps compatibleCredentialType(list(*), list(*))
  compatibleCredentialType : string * TYPE
  compatibleCredentialType(x, s) :-
    isStringCompatibleType(s) | error $[Credential types should be compatible with String type] @x.

  declSecurityContext : scope * list(string) * list(TYPE)
  declSecurityContext(s, properties, types) :- {s_security_context s_principal}
    new s_principal,
    declProperties(s_principal, properties, types),
    new s_security_context,
    declProperty(s_security_context, "principal", ENTITY(s_principal)),
    declProperty(s_security_context, "loggedIn", BOOL()),
    declareVar(s, "securityContext", ENTITY(s_security_context)).

  acDefOk(s, Rule(AccessControlRule(_, _, _, exp, nested))) :-
    // TO-DO: check correct reference using type and match id
    nestedAcRulesOk(s, nested),
    equalType(typeOfExp(s, exp), BOOL()) | error $[Rule should result in a boolean expression] @exp.

  acDefOk(s, Rule(SpecialAccessControlRule(exp))) :-
    equalType(typeOfExp(s, exp), BOOL()) | error $[Rule should result in a boolean expression] @exp.

  nestedAcRulesOk maps nestedAcRuleOk(*, list(*))
  nestedAcRuleOk : scope * AccessControlRule
  nestedAcRuleOk(_, _) :- false | error $[Nested access control rules are not supported yet].
