module desugar/desugar-data

imports
  src-gen/signatures/-

rules

  normalize-data : OptPropAnnosNone() -> PropAnnos([])
  normalize-data : ListSort(x) -> GenericSort("List", [x])
  normalize-data : SetSort(x) -> GenericSort("Set", [x])
  normalize-data : FunctionSortParamsNone() -> FunctionSortParams([])
  normalize-data : FunctionSortReturnNone() -> FunctionSortReturn(SimpleSort("Void"))

  normalize-data : GlobalVarDeclDepr(x, sort) -> GlobalVarDecl(x, sort)
  normalize-data : GlobalVarDeclInitDepr(x, sort, exp) -> GlobalVarDeclInit(x, sort, exp)
  normalize-data : GlobalVarDeclInitInferredDepr(x, exp) -> GlobalVarDeclInitInferred(x, exp)

  normalize-data : RequestVarDeclDepr(x, sort) -> RequestVarDecl(x, sort)
  normalize-data : RequestVarDeclInitDepr(x, sort, exp) -> RequestVarDeclInit(x, sort, exp)
  normalize-data : RequestVarDeclInitInferredDepr(x, exp) -> RequestVarDeclInitInferred(x, exp)

  normalize-data: Property(x, k, srt, PropAnnos(annos)) -> Property(x, k, srt, PropAnnos(annos'))
    where   <not(fetch-elem(?NameAnno()))> annos
          ; <?"name"> x
    with  annos' := [NameAnno() | annos]

  // All rules and signatures below are copied directly from the WebDSL compiler.
  // Some concrete syntax transformations have been rewritten as abstract syntax transformations

  normalize-data : ExtendSessionEntity(ident, entbodydecs){anno*} -> ExtendEntity(ident, entbodydecs){anno*}

  normalize-data: Property(x, k, srt, PropAnnos(annos)) -> Property(x, k, srt, PropAnnos(annos'))
    where <fetch-elem(?IncompleteInverseAnno(prop))> annos
    with  ent := <try(?GenericSort(_,[<id>])); ?SimpleSort(<id>)> srt
        ; annos' := <map(try(\IncompleteInverseAnno(prop) -> InverseAnno(ent, prop)\))> annos
