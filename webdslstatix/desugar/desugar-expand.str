module desugar/desugar-expand

imports
  src-gen/signatures/-

rules

  normalize-expand : DeriveNoBody(p, exp, ps) -> Derive(p, exp, ps, DeriveBody([]))
  normalize-expand : DeriveNoForNoBody(p, exp) -> Derive(p, exp, [], DeriveBody([]))
  normalize-expand : DeriveNoFor(p, exp, body) -> Derive(p, exp, [], body)
  normalize-expand : Section(s, defs*) -> Section(s, defs'*)
    where <fetch(?DeriveCrud(entity_name))> defs*
        ; (create, view, edit, manage) := <crud-page-names> entity_name
        ; (
               <not(fetch(?TemplateDefinition(DefinePage(_, create, _, _, _))))> defs*
            <+ <not(fetch(?TemplateDefinition(DefinePage(_, view, _, _, _))))> defs*
            <+ <not(fetch(?TemplateDefinition(DefinePage(_, edit, _, _, _))))> defs*
            <+ <not(fetch(?TemplateDefinition(DefinePage(_, manage, _, _, _))))> defs*
          )
    with  crud-pages := <construct-crud-pages> (entity_name, create, view, edit, manage)
        ; defs'* := <conc> (defs*, crud-pages)

  crud-page-names : entity_name -> (create, view, edit, manage)
    with
        create := <concat-strings> ["create", entity_name]
      ; view := <decapitalize-string> entity_name
      ; edit := <concat-strings> ["edit", entity_name]
      ; manage := <concat-strings> ["manage", entity_name]

  construct-crud-pages : (entity_name, create, view, edit, manage) -> [create_page, view_page, edit_page, manage_page]
    with
        create_page := TemplateDefinition(DefinePage([], create, FormalArgs([]), TemplateArgs([]), []))
      ; view_page := TemplateDefinition(DefinePage([], view, FormalArgs([Arg("arg", SimpleSort(entity_name))]), TemplateArgs([]), []))
      ; edit_page := TemplateDefinition(DefinePage([], edit, FormalArgs([Arg("arg", SimpleSort(entity_name))]), TemplateArgs([]), []))
      ; manage_page := TemplateDefinition(DefinePage([], manage, FormalArgs([]), TemplateArgs([]), []))

  decapitalize-string =
    explode-string
    ; [to-lower | id]
    ; implode-string
