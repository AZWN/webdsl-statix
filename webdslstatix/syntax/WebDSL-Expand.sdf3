module WebDSL-Expand

imports
  WebDSL-Lexical
  WebDSL-UI

context-free sorts

  DeriveProperty DeriveBody DeriveBodyElement

context-free syntax

  TemplateElement.DeriveNoBody = <
    derive <Id> from <Exp> for ( <{DeriveProperty ","}*> )
  >
  TemplateElement.DeriveNoForNoBody = <
    derive <Id> from <Exp>
  >
  TemplateElement.Derive = <
    derive <Id> from <Exp> for ( <{DeriveProperty ","}*> ) <DeriveBody>
  >
  TemplateElement.DeriveNoFor = <
    derive <Id> from <Exp> <DeriveBody>
  >
  TemplateElement.DeriveNoFromNoFor = <
    derive <Id> <DeriveBody>
  >

  DeriveProperty.DeriveDefault = Id
  DeriveProperty.DeriveMode = <<Id> ( <Id> )>
  DeriveBody.DeriveBody = <{
    <DeriveBodyElement*>
  }>
  DeriveBodyElement.DeriveBodyElement = <
    <Id> { <TemplateElement*> }
  >

  TemplateCall = <derive> {reject}
  Definition.DeriveCrud = <derive crud <Id>>
  Definition.DeriveCrudUpper = <derive CRUD <Id>>

context-free syntax

  Definition.ExpandTemplateCall = <
    expand <ExpandId+> to <Id>
  >
  Definition.ExpandTemplateDefinition = <
    expandtemplate <Id> to <ExpandArgId+> {
      <Definition*>
    }
  >
  TemplateElement.TemplateElementExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> {
      <TemplateElement*>
    }
  >
  EntityBodyDeclaration.EntityBodyDeclarationExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> {
      <EntityBodyDeclaration*>
    }
  >
  Statement.StatementExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> {
      <Statement*>
    }
  >
  ObjectPropertyAssignment.ObjectPropertyAssignmentExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> {
      <ObjectPropertyAssignment*>
    }
  >
  Definition.DefinitionExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> {
      <Definition*>
    }
  >
  Exp.ExpExpandLocal = <expand <ExpandId+> to <ExpandArgId+> { <Exp> }>
  Attribute.AttributeExpandLocal = <expand <ExpandId+> to <ExpandArgId+> { <Attribute> }>
  PropertyAssignment.PropertyAssignmentExpandLocal = <expand <ExpandId+> to <ExpandArgId+> { <PropertyAssignment> }>
  FormalArg.FormalArgExpandLocal = <expand <ExpandId+> to <ExpandArgId+> { <FormalArg> }>
  Case.CaseAltExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> { <Case> }
  >
  TemplateCaseAlt.TemplateCaseAltExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> { <TemplateCaseAlt> }
  >
  TypeCaseAlt.TypeCaseAltExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> { <TypeCaseAlt> }
  >
  TemplateTypeCaseAlt.TemplateTypeCaseAltExpandLocal = <
    expand <ExpandId+> to <ExpandArgId+> { <TemplateTypeCaseAlt> }
  >

  ExpandId = <expandtemplate> {reject}
  ExpandId = <template> {reject}
  ExpandId = <expand> {reject}
  ExpandId = <to> {reject}
  ExpandArgId = <expandtemplate> {reject}
  ExpandArgId = <template> {reject}
  ExpandArgId = <expand> {reject}
  ExpandArgId = <to> {reject}

lexical sorts

  ExpandId ExpandArgId

lexical syntax

  ExpandId = [a-zA-Z0-9\_\-]+
  ExpandArgId = Id

lexical restrictions

  ExpandId -/- [a-zA-Z0-9\_\-]
