module WebDSL-Lexical

imports
  WebDSL-Action

lexical syntax

  TemplateCallId = Id %% hook for reject rules on templatecall names
  Id = [a-zA-Z] [a-zA-Z0-9\_]* 
  PageId = [a-zA-Z] [a-zA-Z0-9\_\-]* 
  ExtendedId = [a-zA-Z0-9\-\_\.]+ 
  ModuleName = {ExtendedId "/"}+ 
  SectionName = ~[\n\r]* 

lexical restrictions

  Id -/- [a-zA-Z0-9\_]
  PageId -/- [a-zA-Z0-9\_\-]
  ModuleName -/- [a-zA-Z0-9\/]

lexical syntax

  Int = "-"? [0-9]+ 
  Long = "-"? [0-9]+ "L" 
  JustMyTest = "jnrofnsci3jmf"

lexical syntax

  Float = "-"? FloatDigits ExponentPart? [fFdD]? 
  FloatDigits = [0-9]* "." [0-9]+ 
  FloatDigits = [0-9]+ 
  ExponentPart = [eE] SignedInteger 
  SignedInteger = [\+\-]? [0-9]+ 
  Float = "-"? [0-9]+ {reject}
  FloatDigits = "." {reject}

lexical restrictions

  Int -/- [0-9]
  Float -/- [fFdD]
  FloatDigits -/- [0-9]
  SignedInteger -/- [0-9]

%% Kernel syntax is required here since we do not want LAYOUT to be parsed between
%% the first QMLex and StringLex
syntax
  
  %% string literal as expression
  String-CF = QMLex-LEX StringLex-LEX QMLex-LEX {ast("String(<2>)")}
  String-CF = QMLex-LEX StringPart-CF* QMLex-LEX {ast("StringInterp(<2>)"), avoid}
  
  %% string literal as template element
  TemplateElement-CF = QMLex-LEX StringLex-LEX QMLex-LEX {ast("Text(<2>)")}
  TemplateElement-CF = QMLex-LEX StringPart-CF* QMLex-LEX {ast("TextInterp(<2>)"),avoid} 
  StringPart-CF = SimpleStringPart-CF
  StringPart-CF = StringLexInterp-LEX 
  SimpleStringPart-CF.InterpExp = "~" SimpleExp-CF 
  StringPart-CF.InterpExp = "~" "(" Exp-CF ")" 

restrictions

  SimpleStringPart -/- [\.\(]    %% make fieldaccess/call not part of string that follows
                                 %% use parentheses variant if a . is needed in the string

context-free syntax
%% ~SimpleExp and ~(Exp) shorthand for output template call

  OutputShorthand.OutputShorthand = "~" SimpleExp 
  OutputShorthand.OutputShorthand = "~" "(" Exp ")" 
  TemplateElement = OutputShorthand 

context-free syntax
%% SimpleExp: specific commonly occuring expressions allowed directly after '~' inside string
%% allowing all expressions directly after '~' causes too many ambiguities
%% parentheses expression is used as delimiter for inserting any expression
%% allowed after '~': var/fieldaccess/thiscall/call/brackets a, a.b, a(), a.b(), (exp)
%% a '.' after a SimpleExp must be rejected as part of String to avoid amb, e.g. not allowed: "~a."
%% in these cases, use '()' if a '.' is needed as part of the string,       e.g.     allowed: "~(a)."
  
  SimpleVar.Var = VarId 
  SimpleExp = SimpleVar 
  SimpleExp.FieldAccess = SimpleExp "." Id 
  SimpleExp.ThisCall = Id "(" {Exp ","}* ")" 
  SimpleExp.Call = SimpleExp "." Id "(" {Exp ","}* ")" 

lexical syntax

  QMLex = "\"" 
  StringLex = StringChar* 
  StringLexInterp = StringChar+ 
  StringChar = ~[\"\n\~\\] 
  StringChar = "\\" [0-9btnfr\'\"\\\~] 
  HexPart = [0-9a-fA-F] 
  StringChar = "\\u" HexPart HexPart HexPart HexPart 

lexical restrictions

  StringLex
  StringLexInterp -/- ~[\"\n\~]

  lexical syntax
    LAYOUT     = [\ \t\n\r]
    LAYOUT     = "//" ~[\n\r]* NewLineEOF
    LAYOUT     = "/*" InsideComment* "*/" 
    InsideComment  = ~[\*] 
    InsideComment  = CommentChar 
    CommentChar    = [\*]     
    NewLineEOF = [\n\r] 
    NewLineEOF = EOF 
    EOF        =  

  lexical restrictions
    CommentChar -/- [\/]
    EOF         -/- ~[]

context-free restrictions

  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
  SectionName -/- ~[\n\r]

lexical syntax

  Word = ~[\ \t\n\r\}]+ 

lexical restrictions

  Word -/- ~[\ \t\n\r\}]

context-free restrictions

  "page"
  "local"
  "email"
  "feed"
  "template"
  "schedule" -/- [a-zA-Z0-9]
