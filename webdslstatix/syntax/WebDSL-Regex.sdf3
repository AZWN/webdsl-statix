module WebDSL-Regex

imports
  WebDSL-Lexical

sorts

  Pattern Exp

context-free syntax

  Exp.Call = RegexExp "." Id "(" {Exp ","}* ")" 
  RegexExp.RegexPattern = "/" Pattern "/" 
  Pattern.SingleBranch = Branche 
  Pattern.TupleBranch = Pattern "|" Pattern {right, prefer}

sorts

  Branche

context-free syntax

  Branche.Pieces = Piece+ 

sorts

  Piece

context-free syntax

  Piece.SingleAtom = Atom 
  Piece.QuantifiedAtom = Atom Quantifier 

sorts

  Quantifier

context-free syntax

  Quantifier.GreedyExactBound = "{" Integer "}" 
  Quantifier.GreedyLowerBound = "{" Integer "," "}" 
  Quantifier.GreedyLowerUpperBound = "{" Integer "," Integer "}" 
  Quantifier.GreedyOnceOrNot = "?" 
  Quantifier.GreedyZeroOrMore = "*" 
  Quantifier.GreedyOneOrMore = "+" 
  Quantifier.ReluctantExactBound = "{" Integer "}?" 
  Quantifier.ReluctantLowerBound = "{" Integer "," "}?" 
  Quantifier.ReluctantLowerUpperBound = "{" Integer "," Integer "}?" 
  Quantifier.ReluctantOnceOrNot = "??" 
  Quantifier.ReluctantZeroOrMore = "*?" 
  Quantifier.ReluctantOneOrMore = "+?" 
  Quantifier.PossessiveExactBound = "{" Integer "}+" 
  Quantifier.PossessiveLowerBound = "{" Integer "," "}+" 
  Quantifier.PossessiveLowerUpperBound = "{" Integer "," Integer "}+" 
  Quantifier.PossessiveOnceOrNot = "?+" 
  Quantifier.PossessiveZeroOrMore = "*+" 
  Quantifier.PossessiveOneOrMore = "++" 

sorts

  Atom

context-free syntax

  Atom.Capture = "(" Pattern ")" 
  Atom.NonCapture = "(?:" Pattern ")" 
  Atom.PositiveLookahead = "(?=" Pattern ")" 
  Atom.NegativeLookahead = "(?!" Pattern ")" 
  Atom.PositiveLookbehind = "(?<=" Pattern ")" 
  Atom.NegativeLookbehind = "(?<!" Pattern ")" 
  Atom.PythonCapture = "(?P<" RegexId ">" Pattern ")" 
  Atom.RegexCapture = "(" Pattern ")@{" RegexId "}" 
  Atom.Empty = "()" 
  Atom.SingleCharacter = "." 
  Atom.LineStart = "^" 
  Atom.LineEnd = "$" 
  Atom.CharacterClass = CharacterClass 
  Atom.AtomLiteral = AtomLiteral 
  Atom.AtomCharacter = AtomCharacter 
  Atom.QuotedAtom = "\\Q" AllChars "\\E" 

sorts

  CharacterClass BracketItem

context-free syntax

  CharacterClass.BracketList = "[" BracketItem+ "]" 
  CharacterClass.NegatedBracketList = "[^" BracketItem+ "]" 
  BracketItem.Range = BracketLiteralOrBracketCharacter "-" BracketLiteralOrBracketCharacter 
  BracketLiteralOrBracketCharacter = BracketLiteral 
  BracketLiteralOrBracketCharacter = BracketCharacter 
  BracketLiteralOrBracketCharacter = BracketLiteral 
  BracketLiteralOrBracketCharacter = BracketCharacter 
  BracketItem.Union = CharacterClass 
  BracketItem.BracketLiteral = BracketLiteral 
  BracketItem.BracketCharacter = BracketCharacter 

sorts

  ClassKeyword

context-free syntax

  ClassKeyword.LowerClass = "Lower" 
  ClassKeyword.UpperClass = "Upper" 
  ClassKeyword.ASCIIClass = "ASCII" 
  ClassKeyword.AlphaClass = "Alpha" 
  ClassKeyword.DigitClass = "Digit" 
  ClassKeyword.AlnumClass = "Alnum" 
  ClassKeyword.PunctClass = "Punct" 
  ClassKeyword.GraphClass = "Graph" 
  ClassKeyword.PrintClass = "Print" 
  ClassKeyword.BlankClass = "Blank" 
  ClassKeyword.CntrlClass = "Cntrl" 
  ClassKeyword.XDigitClass = "XDigit" 
  ClassKeyword.WhiteSpace = "Space" 
  ClassKeyword.JavaIsLowerCase = "javaLowerCase" 
  ClassKeyword.JavaIsLowerCase = "javaUpperCase" 
  ClassKeyword.JavaIsWhitespace = "javaWhitespace" 
  ClassKeyword.JavaIsMirrored = "javaMirrored" 
  ClassKeyword.GreekBlock = "InGreek" 
  ClassKeyword.UppercaseLetter = "Lu" 
  ClassKeyword.CurrencySymbol = "Sc" 

lexical sorts

  BracketLiteral AtomLiteral AllChars

lexical syntax

  BracketLiteral = [a-zA-Z0-9\!\#\%\'\,\:\;\<\=\>\@\_\`\~\$\*\+\?\.\}\|] 
  BracketLiteral = "/" 
  BracketLiteral = [\&\]\-] {reject}
  AtomLiteral = [a-zA-Z0-9\!\#\%\'\,\:\;\<\=\>\@\_\`\~\&\]\-] 
  AtomLiteral = "/" 
  AtomLiteral = [\}\)\|\[] {reject}
  AllChars = [\\\|\$\*\+\?\.\{\}\(\)\&\]\-\[\^\!\#\%\'\,\:\;\<\=\>\@\_\`\~a-zA-Z0-9\t\n\r]* 
  AllChars = "/" 
  AllChars.DoubleQuote = "\"" 

sorts

  BracketCharacter AtomCharacter

context-free syntax

  BracketCharacter.DoubleQuote = "\"" 
  AtomCharacter.DoubleQuote = "\"" 

context-free syntax

  BracketCharacter.OctalChar = "\\0" OctalValue 
  BracketCharacter.HexHexChar = "\\x" TwoHexValue 
  BracketCharacter.DecHexChar = "\\u" FourHexValue 
  BracketCharacter.Tab = "\\t" 
  BracketCharacter.Newline = "\\n" 
  BracketCharacter.Return = "\\r" 
  BracketCharacter.Formfeed = "\\f" 
  BracketCharacter.Alarm = "\\a" 
  BracketCharacter.Escape = "\\e" 
  BracketCharacter.WordChar = "\\w" 
  BracketCharacter.NonWordChar = "\\W" 
  BracketCharacter.WhiteSpaceChar = "\\s" 
  BracketCharacter.NonWhiteSpaceChar = "\\S" 
  BracketCharacter.DigitChar = "\\d" 
  BracketCharacter.NonDigitChar = "\\D" 
  BracketCharacter.ControlCharacter = "\\c" ControlValue 
  BracketCharacter.WordBoundry = "\\b" 
  BracketCharacter.NonWordBoundry = "\\B" 
  BracketCharacter.InputBeginBoundry = "\\A" 
  BracketCharacter.PrevMatchEndBoundry = "\\G" 
  BracketCharacter.EndInputBoundry = "\\Z" 
  BracketCharacter.EndInputFinalBoundry = "\\z" 
  BracketCharacter.BackReference = "\\" BackReference 
  BracketCharacter.Space = "\\ " 
  BracketCharacter.Tab = "\\\t" 
  BracketCharacter.Newline = "\\\n" 
  AtomCharacter.OctalChar = "\\0" OctalValue 
  AtomCharacter.HexHexChar = "\\x" TwoHexValue 
  AtomCharacter.DecHexChar = "\\u" FourHexValue 
  AtomCharacter.Tab = "\\t" 
  AtomCharacter.Newline = "\\n" 
  AtomCharacter.Return = "\\r" 
  AtomCharacter.Formfeed = "\\f" 
  AtomCharacter.Alarm = "\\a" 
  AtomCharacter.Escape = "\\e" 
  AtomCharacter.WordChar = "\\w" 
  AtomCharacter.NonWordChar = "\\W" 
  AtomCharacter.WhiteSpaceChar = "\\s" 
  AtomCharacter.NonWhiteSpaceChar = "\\S" 
  AtomCharacter.DigitChar = "\\d" 
  AtomCharacter.NonDigitChar = "\\D" 
  AtomCharacter.ControlCharacter = "\\c" ControlValue 
  AtomCharacter.WordBoundry = "\\b" 
  AtomCharacter.NonWordBoundry = "\\B" 
  AtomCharacter.InputBeginBoundry = "\\A" 
  AtomCharacter.PrevMatchEndBoundry = "\\G" 
  AtomCharacter.EndInputBoundry = "\\Z" 
  AtomCharacter.EndInputFinalBoundry = "\\z" 
  AtomCharacter.BackReference = "\\" BackReference 
  AtomCharacter.Space = "\\ " 
  AtomCharacter.Tab = "\\\t" 
  AtomCharacter.Newline = "\\\n" 

sorts

  QuotablePatternSymbol

context-free syntax

  AtomCharacter.Quoted = "\\" QuotablePatternSymbol 
  BracketCharacter.Quoted = "\\" QuotablePatternSymbol 

lexical syntax

  QuotablePatternSymbol = [\|\$\*\+\?\.\{\}\(\)\&\]\[\-\^\\\!\#\%\'\,\:\;\<\=\>\@\_\`\~\/] 

context-free syntax

  QuotablePatternSymbol.DoubleQuote = "\"" 
  QuotablePatternSymbol.DoubleQuote = "\"" 

sorts

  Integer OctalValue TwoHexValue FourHexValue BackReference ControlValue

lexical syntax

  Integer = [0-9]+ 
  BackReference = [1-9] [0-9]* 
  OctalValue = [0-7] 
  OctalValue = [0-7] [0-7] 
  OctalValue = [0-3] [0-7] [0-7] 
  TwoHexValue = [0-9A-Fa-f] [0-9A-Fa-f] 
  FourHexValue = [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] 
  ControlValue = [0-9] 
  ControlValue = [0-9] [0-9] 

sorts

  RegexId RegexID

context-free syntax

  RegexId.RegexId = RegexID 

lexical syntax

  RegexID = [A-Za-z\_\$] [A-Za-z0-9\_\$]* 
  RegexID = "true" {reject}
  RegexID = "false" {reject}
  RegexID = "null" {reject}

lexical restrictions

  RegexID -/- [a-zA-Z0-9\_\$]
