module WebDSL-Native

imports
  WebDSL-Core
  WebDSL-Lexical

context-free sorts

  NativeClassAlias NativeClassSuper

context-free syntax

  Definition.NativeClass = <
    native class <QId> <NativeClassAlias> <NativeClassSuper> {
      <NativeClassElement*>
    }
  >
  NativeClassAlias.NativeClassAlias = <as <Id>>
  NativeClassAlias.NativeClassAliasNone = <>
  NativeClassSuper.NativeClassSuper = <: <Id>>
  NativeClassSuper.NativeClassSuperNone = <>

context-free sorts

  NativeClassElement NativeType NativeClassFunction NativeClassFunctionReturn
  NativeClassFunctionStatic NativeClassFunctionFromStatic

context-free syntax

  NativeClassElement.NativeClassProperty = <
    <Id> : <NativeType>
  >
  NativeClassElement = NativeClassFunction
  NativeClassFunction.NativeClassFunction = <
    <NativeClassFunctionStatic> <NativeFunId> ( <{NativeType ","}*> ) <NativeClassFunctionReturn>
  >
  NativeClassFunctionReturn.NativeClassFunctionReturn = <: <NativeType>>
  NativeClassFunctionReturn.NativeClassFunctionReturnNone = <>
  NativeClassFunctionStatic.NativeClassFunctionStatic = <static>
  NativeClassFunctionStatic.NativeClassFunctionStaticNone = <>
  NativeClassFunctionFromStatic.NativeClassFunctionFromStatic = <
    <QId> as <NativeClassFunction>
  >
  NativeClassElement = NativeClassFunctionFromStatic
  NativeClassElement.NativeClassConstructor = <
    constructor ( <{NativeType ","}*> )
  >
  NativeClassElement.NativeClassConstructorFromStatic = <
    <QId> as constructor ( <{NativeType ","}*> )
  >
  NativeType.NativeGenericType = <<Id> \< <{NativeType ","}*> \>>
  NativeType.NativeGenericTypeList = <[ <{NativeType ","}*> ]>
  NativeType.NativeGenericTypeSet = <{ <{NativeType ","}*> }>
  NativeType.NativeSimpleType = Id

  NativeClassElement = <constructor ( <{NativeType ","}*> ) <NativeClassFunctionReturn>> {reject}

lexical sorts

  NativeFunId

lexical syntax

  NativeFunId = Id
  NativeFunId = "constructor" {reject}
