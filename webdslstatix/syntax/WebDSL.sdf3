module WebDSL

imports
  WebDSL-Lexical
  WebDSL-Keywords	
  WebDSL-UI	
  WebDSL-Ajax	
  WebDSL-Action	
  WebDSL-DataModel	
  WebDSL-DataValidation	
  WebDSL-AccessControl	
  WebDSL-XML	
  WebDSL-JavaScript	
  WebDSL-CSS	
  WebDSL-Regex	
  WebDSL-Enums	
  WebDSL-Expand	
  WebDSL-Native	
  WebDSL-Dispatch	
  WebDSL-Exception	
  WebDSL-Type	
  WebDSL-Test	
  WebDSL-TimeInterval	
  WebDSL-Service	
  WebDSL-Search	
  WebDSL-Prefetch	
  WebDSL-Routing	
  WebDSL-Attributes	
  WebDSL-EntityDerive

context-free start-symbols

  Unit

sorts

  Id QId Int ModuleName Float String UNDEFINED

context-free syntax

  QId = Id 
  QId.Qualified = QId "." Id 

context-free syntax %% Types

  Sort = SimpleSort 
  Sort = GenericSort 
  Sort = RefSort 
  Sort = ListSort 
  Sort = SetSort 
  Sort = FunctionSort 
  SimpleSort.SimpleSort = Id 
  GenericSort.GenericSort = Id "<" {Sort ","}+ ">" 
  RefSort.RefSort = "Ref" "<" Sort ">" 
  RefSort.RefSort = "ref" Sort 
  GenericSort = "Ref" "<" Sort ">" {reject}
  
  %% List type '[Type]' and Set type '{Type}' notation
  ListSort = "[" Sort "]" {ast("GenericSort(\"List\",[<1>])")}
  SetSort = "{" Sort "}" {ast("GenericSort(\"Set\",[<1>])")}
  
  %% function type; optionally specify (named) args and return type
  FunctionSort.FunctionSort = "function" FunctionSortParams FunctionSortReturn 
  FunctionSortParams =  {ast("[]")}
  FunctionSortParams = "(" {FunctionSortParam ","}* ")" {ast("<1>")}
  FunctionSortParam.UnnamedArg = Sort 
  FunctionSortParam.Arg = Id ":" Sort 
  FunctionSortReturn =  {ast("SimpleSort(\"Void\")")}
  FunctionSortReturn = ":" Sort {ast("<1>")}
  SimpleSort = "function" {reject}
  FormalArg.Arg = Id ":" Sort 

sorts

  Application Module Unit

syntax

  Section-CF.Section = "section" SectionName-CF LAYOUT?-CF Definition*-CF 

context-free syntax

  Application.ApplicationDefs = "application" QId Definition+ Section* 
  Application.Application = "application" QId Section* 
  Description.Description = "description" "{" Word* "}" 
  Description.Note = "note" "{" Word* "}" 
  Definition = Description 
  Module.Module = "module" ModuleName Section* 
  Module.ModuleDefs = "module" ModuleName Definition+ Section* 
  Definition.Imports = "imports" ModuleName 
  Unit = Application 
  Unit = Module 

sorts

  Action Statements Statement Exp

context-free syntax

  Definition = Action 
  Statements = Statement* 
  Definition = NativeClassDeclaration 
