module WebDSL-AccessControl 

imports
  WebDSL-UI
  WebDSL-Action
  WebDSL-DataModel
  WebDSL-Lexical
  WebDSL

context-free sorts

  // Optional sorts
  OptMatchArgs OptId OptWildCardArg

  // Access control sorts
  AccessControlDefinition AccessControlPrincipal AccessControlRule AccessControlCheck
  AccessControlPointcutElement AccessControlPointcut AccessControlImportRulesArg
  PolicyExp Predicate

lexical sorts

  MatchId WildCardArg MatchArgs

lexical syntax

  MatchId = [a-zA-Z] [a-zA-Z0-9\_\-]* [\*]? 
  MatchId = [\*] 
  WildCardArg = [\*] 

context-free syntax

  Section.AccessControlDefinition = "access" "control" "rules" OptId AccessControlDefinition* 
  Section.AccessControlDefinitionAlt = "access" "control" "rules" "{" OptId AccessControlDefinition* "}"
  OptId.OptIdNone = <>
  OptId.OptIdSome = Id
  AccessControlPrincipal.AccessControlPrincipal = "principal" "is" Id "with" "credentials" {Id ","}+ 
  Definition = AccessControlPrincipal
  AccessControlDefinition = AccessControlPrincipal
  AccessControlDefinition = AccessControlRule 
  AccessControlRule.AccessControlRule = "rule" Id MatchId OptMatchArgs "{" AccessControlCheck AccessControlRule* "}" 
  OptMatchArgs.OptMatchArgsSome = "(" MatchArgs ")"
  OptMatchArgs.OptMatchArgsNone = <>
  MatchArgs.MatchArgs = {FormalArg ","}* OptWildCardArg {prefer}
  MatchArgs.MatchArgs = {Exp ","}* OptWildCardArg 
  AccessControlCheck = Exp 
  AccessControlRule.SpecialAccessControlRule = "rule" Id "{" AccessControlCheck "}" 
  Predicate.Predicate = "predicate" Id OptFormalArgs "{" Exp "}"
  Definition = Predicate
  AccessControlDefinition = Predicate
  EntityBodyDeclaration.PredicateInEntity = "predicate" Id OptFormalArgs "{" Exp "}" 
  AccessControlPointcutElement.AccessControlPointcutElement = Id MatchId "(" {Id ","}* OptWildCardArg ")" 
  AccessControlPointcut.AccessControlPointcut = "pointcut" Id "(" {FormalArg ","}* ")" "{" {AccessControlPointcutElement ","}* "}" 
  AccessControlDefinition = AccessControlPointcut 
  TemplateElement.AccessControlImportRules = "apply ac rules" Id "(" {AccessControlImportRulesArg ","}* ")" {prefer}
  AccessControlImportRulesArg.ACVar = Id 

  OptWildCardArg.OptWildCardArgNone = <>
  OptWildCardArg.OptWildCardArgSome = WildCardArg

context-free syntax

  Section.ACPolicy = "access" "control" "policy" PolicyExp 
  PolicyExp.Name = Id 
  PolicyExp = "(" PolicyExp ")" {bracket}
  PolicyExp.PolicyAnd = PolicyExp "AND" PolicyExp {assoc}
  PolicyExp.PolicyOr = PolicyExp "OR" PolicyExp {assoc}

context-free syntax

  Modifier.IgnoreAccessControl = "ignore-access-control" 
